package com.github.avrilfanomar.picatplugin.language.parser

import com.github.avrilfanomar.picatplugin.language.PicatLanguage
import com.github.avrilfanomar.picatplugin.language.lexer.PicatLexer
import com.github.avrilfanomar.picatplugin.language.psi.PicatFile
import com.github.avrilfanomar.picatplugin.language.psi.PicatTypes
import com.intellij.lang.ASTNode
import com.intellij.lang.ParserDefinition
import com.intellij.lang.PsiParser
import com.intellij.lexer.Lexer
import com.intellij.openapi.project.Project
import com.intellij.psi.FileViewProvider
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import com.intellij.psi.tree.IFileElementType
import com.intellij.psi.tree.TokenSet

/**
 * Parser definition for Picat language.
 * Connects the lexer, parser, and PSI elements.
 * 
 * Note: PicatParser and PicatTypes will be generated by the Grammar-Kit plugin
 * based on the BNF grammar file. This is a placeholder implementation.
 */
class PicatParserDefinition : ParserDefinition {
    companion object {
        val FILE = IFileElementType(PicatLanguage)
    }

    override fun createLexer(project: Project): Lexer = PicatLexer()

    override fun createParser(project: Project): PsiParser = PicatParser()

    override fun getFileNodeType(): IFileElementType = FILE

    override fun getCommentTokens(): TokenSet = PicatTokenSets.COMMENTS

    override fun getStringLiteralElements(): TokenSet = PicatTokenSets.STRINGS

    override fun createElement(node: ASTNode): PsiElement = PicatTypes.Factory.createElement(node)

    override fun createFile(viewProvider: FileViewProvider): PsiFile = PicatFile(viewProvider)
}
