package com.github.avrilfanomar.picatplugin.language.parser

import com.github.avrilfanomar.picatplugin.language.PicatLanguage
import com.github.avrilfanomar.picatplugin.language.lexer._PicatLexer // Import the JFlex lexer
import com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes
import com.github.avrilfanomar.picatplugin.language.psi.impl.PicatFileImpl
import com.intellij.lang.ASTNode
import com.intellij.lang.ParserDefinition
import com.intellij.lang.PsiParser
import com.intellij.lexer.Lexer
import com.intellij.lexer.FlexAdapter
import java.io.Reader
import com.intellij.openapi.project.Project
import com.intellij.psi.FileViewProvider
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import com.intellij.psi.TokenType
import com.intellij.psi.tree.IFileElementType
import com.intellij.psi.tree.TokenSet

/**
 * Parser definition for Picat language.
 * Connects the lexer, parser, and PSI elements.
 *
 * Note: PicatParser and PicatTypes will be generated by the Grammar-Kit plugin
 * based on the BNF grammar file. This is a placeholder implementation.
 */
class PicatParserDefinition : ParserDefinition {

    override fun createLexer(project: Project): Lexer = FlexAdapter(_PicatLexer(null as Reader?))

    override fun createParser(project: Project): PsiParser = PicatParser()

    override fun getFileNodeType(): IFileElementType = FILE

    override fun getWhitespaceTokens(): TokenSet = TokenSet.create(TokenType.WHITE_SPACE)

    override fun getCommentTokens(): TokenSet = TokenSet.create(
        PicatTokenTypes.COMMENT,
        PicatTokenTypes.MULTI_LINE_COMMENT
    )

    override fun getStringLiteralElements(): TokenSet = TokenSet.create(PicatTokenTypes.STRING)

    override fun createElement(node: ASTNode): PsiElement =
        PicatTokenTypes.Factory.createElement(node) // Use the generated factory

    override fun createFile(viewProvider: FileViewProvider): PsiFile =
        PicatFileImpl(viewProvider)
}

val FILE = IFileElementType(PicatLanguage)
