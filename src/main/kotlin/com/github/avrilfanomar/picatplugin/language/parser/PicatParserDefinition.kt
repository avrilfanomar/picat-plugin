package com.github.avrilfanomar.picatplugin.language.parser

import com.github.avrilfanomar.picatplugin.language.PicatLanguage
package com.github.avrilfanomar.picatplugin.language.parser

import com.github.avrilfanomar.picatplugin.language.PicatLanguage
// It seems these specific imports might be causing ambiguity if the compiler also sees them via the 'gen' source root.
// Relying on fully qualified names or more targeted imports if needed.
// import com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes // Potentially ambiguous
// import com.github.avrilfanomar.picatplugin.language.psi.PicatProgram // Potentially ambiguous
// import com.github.avrilfanomar.picatplugin.language.psi.impl.PicatProgramImpl // Potentially ambiguous
import com.github.avrilfanomar.picatplugin.language.lexer.PicatLexerAdapter
import com.intellij.lang.ASTNode
import com.intellij.lang.ParserDefinition
import com.intellij.lang.PsiParser
import com.intellij.lexer.Lexer
import com.intellij.openapi.project.Project
import com.intellij.psi.FileViewProvider
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import com.intellij.psi.TokenType
import com.intellij.psi.tree.IFileElementType
import com.intellij.psi.tree.TokenSet
import generated.GeneratedParser // Corrected Parser Import

/**
 * Parser definition for Picat language.
 * Connects the lexer, parser, and PSI elements.
 *
 * Note: PicatParser and PicatTypes will be generated by the Grammar-Kit plugin
 * based on the BNF grammar file. This is a placeholder implementation.
 */
class PicatParserDefinition : ParserDefinition {

    override fun createLexer(project: Project): Lexer = PicatLexerAdapter() // Use imported class

    override fun createParser(project: Project): PsiParser = GeneratedParser()

    override fun getFileNodeType(): IFileElementType = FILE

    override fun getWhitespaceTokens(): TokenSet = TokenSet.create(TokenType.WHITE_SPACE)

    override fun getCommentTokens(): TokenSet = TokenSet.create(
        PicatTokenTypes.COMMENT,
        PicatTokenTypes.MULTI_LINE_COMMENT
    )

    override fun getStringLiteralElements(): TokenSet = TokenSet.create(PicatTokenTypes.STRING)

    override fun createElement(node: ASTNode): PsiElement =
        PicatTokenTypes.Factory.createElement(node) // Use the generated factory

    override fun createFile(viewProvider: FileViewProvider): PsiFile =
        PicatProgramImpl(viewProvider, PicatLanguage) // Instantiate Impl class, passing language
}

val FILE = IFileElementType(PicatLanguage)
