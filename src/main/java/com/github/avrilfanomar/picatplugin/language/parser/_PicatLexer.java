// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PicatLexer.flex

package com.github.avrilfanomar.picatplugin.language.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes.*;


public class _PicatLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\36\1\40\1\36\10\41\1\42"+
    "\10\41\1\43\2\41\1\44\1\45\1\46\1\47\1\50"+
    "\1\0\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\62\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\62\1\101\1\102\1\103\1\104\6\0"+
    "\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0"+
    "\2\3\5\0\1\1\57\0\1\1\240\0\1\1\377\0"+
    "\u0100\105";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\22\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\4\0\1\41\1\0"+
    "\1\42\1\43\1\0\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\0\1\51\4\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\0\1\57\1\0\1\60\1\61\2\0\1\62"+
    "\5\33\1\63\6\33\1\64\1\33\1\65\1\66\3\33"+
    "\1\67\1\70\11\33\1\0\1\71\2\0\1\72\1\73"+
    "\3\0\1\74\1\75\1\76\1\77\1\100\1\101\1\0"+
    "\1\102\1\0\1\103\1\104\4\33\1\105\1\33\1\106"+
    "\11\33\1\107\1\110\2\33\1\111\5\33\1\112\2\33"+
    "\1\113\1\114\1\115\1\116\1\117\1\0\1\120\1\121"+
    "\1\33\1\122\2\33\1\123\2\33\1\124\6\33\1\125"+
    "\1\33\1\126\3\33\1\127\1\33\1\130\2\33\1\0"+
    "\1\74\1\131\1\132\4\33\1\133\4\33\1\134\3\33"+
    "\1\135\1\136\1\137\1\140\1\33\1\141\1\33\1\142"+
    "\2\33\1\143\1\33\1\144\1\33\1\145\2\33\1\146"+
    "\1\147\1\150\1\151\1\152\2\33\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\106\0\u01a4"+
    "\0\106\0\u01ea\0\106\0\106\0\u0230\0\u0276\0\106\0\106"+
    "\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\106\0\u041a\0\u0460"+
    "\0\u04a6\0\u04ec\0\106\0\u0532\0\106\0\u0578\0\106\0\106"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\106\0\106\0\106\0\106\0\u0118\0\106"+
    "\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\106\0\106"+
    "\0\u01ea\0\106\0\u0c4e\0\106\0\106\0\106\0\u0c94\0\u0cda"+
    "\0\106\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\106\0\106\0\106"+
    "\0\106\0\u0e38\0\u0e7e\0\106\0\u0ec4\0\106\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\106\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u0762"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u0762\0\u12de"+
    "\0\u1324\0\u0762\0\u136a\0\u13b0\0\u13f6\0\u0762\0\u0762\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\106\0\u16f8\0\u173e\0\106\0\106\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u0d66\0\u0dac\0\u0df2\0\106\0\106\0\u189c"+
    "\0\106\0\u18e2\0\106\0\u0762\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u0762\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u0762\0\u1d88\0\u1dce"+
    "\0\u0762\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u0762\0\u1f72"+
    "\0\u1fb8\0\u0762\0\106\0\106\0\106\0\106\0\u1ffe\0\106"+
    "\0\106\0\u2044\0\u0762\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u0762\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u0762"+
    "\0\u238c\0\u0762\0\u23d2\0\u2418\0\u245e\0\u0762\0\u24a4\0\u0762"+
    "\0\u24ea\0\u2530\0\u2576\0\u2576\0\u0762\0\u0762\0\u25bc\0\u2602"+
    "\0\u2648\0\u268e\0\u0762\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u0762"+
    "\0\u27ec\0\u2832\0\u2878\0\u0762\0\u0762\0\u0762\0\u0762\0\u28be"+
    "\0\u0762\0\u2904\0\u0762\0\u294a\0\u2990\0\u0762\0\u29d6\0\u0762"+
    "\0\u2a1c\0\u0762\0\u2a62\0\u2aa8\0\u0762\0\u0762\0\u0762\0\u0762"+
    "\0\u0762\0\u2aee\0\u2b34\0\u0762";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\6\34\1\35\1\36\1\37\1\40\1\34"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\47\1\50"+
    "\2\47\1\51\1\52\1\53\1\54\1\55\1\56\1\47"+
    "\1\57\1\60\1\47\1\61\1\62\1\47\1\63\1\64"+
    "\1\65\2\2\107\0\3\3\134\0\1\66\53\0\5\67"+
    "\1\70\37\67\1\71\40\67\4\0\1\72\15\0\1\73"+
    "\6\0\1\74\1\75\12\0\1\76\1\0\1\77\34\0"+
    "\1\100\1\0\2\10\1\0\103\10\12\101\1\102\32\101"+
    "\1\103\40\101\15\0\1\104\106\0\1\105\110\0\1\106"+
    "\27\0\30\107\22\0\1\110\4\0\1\111\104\0\1\112"+
    "\1\0\4\24\10\0\1\113\2\0\1\114\1\115\6\0"+
    "\1\113\14\0\1\114\7\0\1\115\27\0\1\112\1\0"+
    "\4\24\77\0\1\116\6\0\1\117\2\0\1\120\104\0"+
    "\1\121\1\122\102\0\1\123\3\0\1\124\11\0\1\125"+
    "\72\0\1\126\1\127\103\0\1\130\1\131\76\0\4\34"+
    "\7\0\6\34\4\0\31\34\52\0\1\132\63\0\4\47"+
    "\7\0\6\47\4\0\16\47\1\133\12\47\30\0\4\47"+
    "\7\0\6\47\4\0\21\47\1\134\7\47\30\0\4\47"+
    "\7\0\6\47\4\0\1\47\1\135\15\47\1\136\11\47"+
    "\30\0\4\47\7\0\6\47\4\0\11\47\1\137\5\47"+
    "\1\140\11\47\30\0\4\47\7\0\6\47\4\0\14\47"+
    "\1\141\1\47\1\142\10\47\1\143\1\47\30\0\4\47"+
    "\7\0\6\47\4\0\1\47\1\144\7\47\1\145\5\47"+
    "\1\146\11\47\30\0\4\47\7\0\6\47\4\0\31\47"+
    "\30\0\4\47\7\0\6\47\4\0\6\47\1\147\6\47"+
    "\1\150\1\151\3\47\1\152\6\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\153\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\154\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\155\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\6\47\1\156\12\47\1\157\7\47\30\0"+
    "\4\47\7\0\6\47\4\0\1\47\1\160\17\47\1\161"+
    "\7\47\30\0\4\47\7\0\6\47\4\0\5\47\1\162"+
    "\23\47\30\0\4\47\7\0\6\47\4\0\1\47\1\163"+
    "\6\47\1\164\10\47\1\165\7\47\30\0\4\47\7\0"+
    "\6\47\4\0\22\47\1\166\6\47\30\0\4\47\7\0"+
    "\6\47\4\0\10\47\1\167\20\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\170\11\47\52\0\1\171\72\0"+
    "\1\172\120\0\1\173\72\0\1\174\104\0\1\175\1\0"+
    "\1\176\117\0\1\177\105\0\1\200\63\0\4\107\7\0"+
    "\6\107\4\0\31\107\5\0\15\110\1\201\70\110\23\0"+
    "\4\202\102\0\2\203\104\0\3\204\103\0\4\205\7\0"+
    "\3\205\10\0\6\205\62\0\1\206\104\0\1\207\120\0"+
    "\1\210\73\0\1\211\104\0\1\212\106\0\1\213\75\0"+
    "\4\47\7\0\6\47\4\0\4\47\1\214\24\47\30\0"+
    "\4\47\7\0\6\47\4\0\5\47\1\215\23\47\30\0"+
    "\4\47\7\0\6\47\4\0\22\47\1\216\1\217\5\47"+
    "\30\0\4\47\7\0\6\47\4\0\16\47\1\220\12\47"+
    "\30\0\4\47\7\0\6\47\4\0\25\47\1\221\3\47"+
    "\30\0\4\47\7\0\6\47\4\0\22\47\1\222\6\47"+
    "\30\0\4\47\7\0\6\47\4\0\4\47\1\223\24\47"+
    "\30\0\4\47\7\0\6\47\4\0\20\47\1\224\10\47"+
    "\30\0\4\47\7\0\6\47\4\0\11\47\1\225\2\47"+
    "\1\226\14\47\30\0\4\47\7\0\6\47\4\0\16\47"+
    "\1\227\12\47\30\0\4\47\7\0\6\47\4\0\21\47"+
    "\1\230\7\47\30\0\4\47\7\0\6\47\4\0\20\47"+
    "\1\231\10\47\30\0\4\47\7\0\6\47\4\0\3\47"+
    "\1\232\1\233\24\47\30\0\4\47\7\0\6\47\4\0"+
    "\17\47\1\234\11\47\30\0\4\47\7\0\6\47\4\0"+
    "\4\47\1\235\24\47\30\0\4\47\7\0\6\47\4\0"+
    "\23\47\1\236\5\47\30\0\4\47\7\0\6\47\4\0"+
    "\22\47\1\237\6\47\30\0\4\47\7\0\6\47\4\0"+
    "\11\47\1\240\17\47\30\0\4\47\7\0\6\47\4\0"+
    "\15\47\1\241\5\47\1\242\5\47\30\0\4\47\7\0"+
    "\6\47\4\0\2\47\1\243\26\47\30\0\4\47\7\0"+
    "\6\47\4\0\5\47\1\244\13\47\1\245\7\47\30\0"+
    "\4\47\7\0\6\47\4\0\24\47\1\246\3\47\1\247"+
    "\30\0\4\47\7\0\6\47\4\0\11\47\1\250\17\47"+
    "\30\0\4\47\7\0\6\47\4\0\11\47\1\251\17\47"+
    "\30\0\4\47\7\0\6\47\4\0\21\47\1\252\7\47"+
    "\5\0\2\67\2\0\101\67\46\0\1\253\73\0\1\254"+
    "\74\0\1\255\63\0\2\101\2\0\101\101\1\0\15\110"+
    "\1\201\4\110\1\256\63\110\23\0\4\202\11\0\1\257"+
    "\14\0\1\257\62\0\1\260\106\0\1\261\75\0\4\47"+
    "\7\0\6\47\4\0\1\47\1\262\27\47\30\0\4\47"+
    "\7\0\6\47\4\0\5\47\1\263\23\47\30\0\4\47"+
    "\7\0\6\47\4\0\3\47\1\264\25\47\30\0\4\47"+
    "\7\0\6\47\4\0\23\47\1\265\5\47\30\0\4\47"+
    "\7\0\6\47\4\0\5\47\1\266\23\47\30\0\4\47"+
    "\7\0\6\47\4\0\1\267\30\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\270\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\14\47\1\271\14\47\30\0\4\47\7\0"+
    "\6\47\4\0\22\47\1\272\6\47\30\0\4\47\7\0"+
    "\6\47\4\0\1\47\1\273\27\47\30\0\4\47\7\0"+
    "\6\47\4\0\5\47\1\274\23\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\275\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\14\47\1\276\14\47\30\0\4\47\7\0"+
    "\6\47\4\0\5\47\1\277\23\47\30\0\4\47\7\0"+
    "\6\47\4\0\20\47\1\300\10\47\30\0\4\47\7\0"+
    "\6\47\4\0\24\47\1\301\4\47\30\0\4\47\7\0"+
    "\6\47\4\0\22\47\1\302\6\47\30\0\4\47\7\0"+
    "\6\47\4\0\25\47\1\303\3\47\30\0\4\47\7\0"+
    "\6\47\4\0\24\47\1\304\4\47\30\0\4\47\7\0"+
    "\6\47\4\0\14\47\1\305\14\47\30\0\4\47\7\0"+
    "\6\47\4\0\16\47\1\306\12\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\307\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\5\47\1\310\23\47\30\0\4\47\7\0"+
    "\6\47\4\0\16\47\1\311\12\47\30\0\4\47\7\0"+
    "\6\47\4\0\14\47\1\312\14\47\23\0\1\313\1\0"+
    "\1\313\2\0\4\314\102\0\4\47\7\0\6\47\4\0"+
    "\13\47\1\315\15\47\30\0\4\47\7\0\6\47\4\0"+
    "\10\47\1\316\20\47\30\0\4\47\7\0\6\47\4\0"+
    "\11\47\1\317\17\47\30\0\4\47\7\0\6\47\4\0"+
    "\11\47\1\320\17\47\30\0\4\47\7\0\6\47\4\0"+
    "\15\47\1\321\13\47\30\0\4\47\7\0\6\47\4\0"+
    "\21\47\1\322\7\47\30\0\4\47\7\0\6\47\4\0"+
    "\5\47\1\323\23\47\30\0\4\47\7\0\6\47\4\0"+
    "\14\47\1\324\14\47\30\0\4\47\7\0\6\47\4\0"+
    "\1\47\1\325\27\47\30\0\4\47\7\0\6\47\4\0"+
    "\21\47\1\326\7\47\30\0\4\47\7\0\6\47\4\0"+
    "\24\47\1\327\4\47\30\0\4\47\7\0\6\47\4\0"+
    "\27\47\1\330\1\47\30\0\4\47\7\0\6\47\4\0"+
    "\14\47\1\331\14\47\30\0\4\47\7\0\6\47\4\0"+
    "\1\47\1\332\27\47\30\0\4\47\7\0\6\47\4\0"+
    "\21\47\1\333\7\47\30\0\4\47\7\0\6\47\4\0"+
    "\5\47\1\334\23\47\30\0\4\47\7\0\6\47\4\0"+
    "\26\47\1\335\2\47\30\0\4\47\7\0\6\47\4\0"+
    "\7\47\1\336\21\47\30\0\4\47\7\0\6\47\4\0"+
    "\5\47\1\337\23\47\30\0\4\314\102\0\4\47\7\0"+
    "\6\47\4\0\16\47\1\340\12\47\30\0\4\47\7\0"+
    "\6\47\4\0\6\47\1\341\22\47\30\0\4\47\7\0"+
    "\6\47\4\0\17\47\1\342\11\47\30\0\4\47\7\0"+
    "\6\47\4\0\23\47\1\343\5\47\30\0\4\47\7\0"+
    "\6\47\4\0\14\47\1\344\14\47\30\0\4\47\7\0"+
    "\6\47\4\0\3\47\1\345\25\47\30\0\4\47\7\0"+
    "\6\47\4\0\23\47\1\346\5\47\30\0\4\47\7\0"+
    "\6\47\4\0\4\47\1\347\24\47\30\0\4\47\7\0"+
    "\6\47\4\0\5\47\1\350\23\47\30\0\4\47\7\0"+
    "\6\47\4\0\23\47\1\351\5\47\30\0\4\47\7\0"+
    "\6\47\4\0\16\47\1\352\12\47\30\0\4\47\7\0"+
    "\6\47\4\0\24\47\1\353\4\47\30\0\4\47\7\0"+
    "\6\47\4\0\4\47\1\354\24\47\30\0\4\47\7\0"+
    "\6\47\4\0\30\47\1\355\30\0\4\47\7\0\6\47"+
    "\4\0\10\47\1\356\20\47\30\0\4\47\7\0\6\47"+
    "\4\0\5\47\1\357\23\47\30\0\4\47\7\0\6\47"+
    "\4\0\5\47\1\360\23\47\30\0\4\47\7\0\6\47"+
    "\4\0\5\47\1\361\23\47\30\0\4\47\7\0\6\47"+
    "\4\0\24\47\1\362\4\47\30\0\4\47\7\0\6\47"+
    "\4\0\14\47\1\363\14\47\30\0\4\47\7\0\6\47"+
    "\4\0\5\47\1\364\23\47\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11130];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\2\11\5\1\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\2\11\22\1\4\11\1\0\1\11\4\0\1\1"+
    "\1\0\2\11\1\0\1\11\1\0\3\11\1\1\1\0"+
    "\1\11\4\0\4\11\1\1\1\0\1\11\1\0\1\11"+
    "\1\1\2\0\1\11\36\1\1\0\1\11\2\0\2\11"+
    "\3\0\4\1\2\11\1\0\1\11\1\0\1\11\37\1"+
    "\4\11\1\0\2\11\31\1\1\0\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PicatLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PicatLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 108: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 3:
            { return CUT;
            }
          // fall through
          case 110: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 111: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 112: break;
          case 6:
            { return AMPERSAND;
            }
          // fall through
          case 113: break;
          case 7:
            { return LPAR;
            }
          // fall through
          case 114: break;
          case 8:
            { return RPAR;
            }
          // fall through
          case 115: break;
          case 9:
            { return MULTIPLY;
            }
          // fall through
          case 116: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 117: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 118: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 119: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 120: break;
          case 14:
            { return DIVIDE;
            }
          // fall through
          case 121: break;
          case 15:
            { return INTEGER;
            }
          // fall through
          case 122: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 123: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 124: break;
          case 18:
            { return LESS;
            }
          // fall through
          case 125: break;
          case 19:
            { return EQUAL;
            }
          // fall through
          case 126: break;
          case 20:
            { return GREATER;
            }
          // fall through
          case 127: break;
          case 21:
            { return QUESTION_MARK;
            }
          // fall through
          case 128: break;
          case 22:
            { return AT;
            }
          // fall through
          case 129: break;
          case 23:
            { return VARIABLE;
            }
          // fall through
          case 130: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 131: break;
          case 25:
            { return RBRACKET;
            }
          // fall through
          case 132: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 133: break;
          case 27:
            { return IDENTIFIER;
            }
          // fall through
          case 134: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 135: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 136: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 137: break;
          case 31:
            { return NOT_EQUAL;
            }
          // fall through
          case 138: break;
          case 32:
            { return STRING;
            }
          // fall through
          case 139: break;
          case 33:
            { return HASH_EQUAL_OP;
            }
          // fall through
          case 140: break;
          case 34:
            { return HASH_CARET_OP;
            }
          // fall through
          case 141: break;
          case 35:
            { return HASH_TILDE_OP;
            }
          // fall through
          case 142: break;
          case 36:
            { return QUOTED_ATOM;
            }
          // fall through
          case 143: break;
          case 37:
            { return POWER;
            }
          // fall through
          case 144: break;
          case 38:
            { return CONCAT_OP;
            }
          // fall through
          case 145: break;
          case 39:
            { return RANGE_OP;
            }
          // fall through
          case 146: break;
          case 40:
            { return FIELD_ACCESS;
            }
          // fall through
          case 147: break;
          case 41:
            { return INT_DIVIDE;
            }
          // fall through
          case 148: break;
          case 42:
            { return RULE_OP;
            }
          // fall through
          case 149: break;
          case 43:
            { return DOUBLE_COLON_OP;
            }
          // fall through
          case 150: break;
          case 44:
            { return ASSIGN_OP;
            }
          // fall through
          case 151: break;
          case 45:
            { return SHIFT_LEFT;
            }
          // fall through
          case 152: break;
          case 46:
            { return LESS_EQUAL;
            }
          // fall through
          case 153: break;
          case 47:
            { return ARROW_OP;
            }
          // fall through
          case 154: break;
          case 48:
            { return GREATER_EQUAL;
            }
          // fall through
          case 155: break;
          case 49:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 156: break;
          case 50:
            { return BACKSLASH;
            }
          // fall through
          case 157: break;
          case 51:
            { return DO_KEYWORD;
            }
          // fall through
          case 158: break;
          case 52:
            { return IF_KEYWORD;
            }
          // fall through
          case 159: break;
          case 53:
            { return IN_KEYWORD;
            }
          // fall through
          case 160: break;
          case 54:
            { return IS_KEYWORD;
            }
          // fall through
          case 161: break;
          case 55:
            { return OF_KEYWORD;
            }
          // fall through
          case 162: break;
          case 56:
            { return OR_KEYWORD;
            }
          // fall through
          case 163: break;
          case 57:
            { return HASH_NOT_EQUAL_OP;
            }
          // fall through
          case 164: break;
          case 58:
            { return HASH_LESS_EQUAL_OP;
            }
          // fall through
          case 165: break;
          case 59:
            { return HASH_ARROW_OP;
            }
          // fall through
          case 166: break;
          case 60:
            { return FLOAT;
            }
          // fall through
          case 167: break;
          case 61:
            { return BINARY_INTEGER;
            }
          // fall through
          case 168: break;
          case 62:
            { return OCTAL_INTEGER;
            }
          // fall through
          case 169: break;
          case 63:
            { return HEX_INTEGER;
            }
          // fall through
          case 170: break;
          case 64:
            { return BICONDITIONAL_OP;
            }
          // fall through
          case 171: break;
          case 65:
            { return IDENTICAL;
            }
          // fall through
          case 172: break;
          case 66:
            { return SHIFT_RIGHT_TRIPLE_OP;
            }
          // fall through
          case 173: break;
          case 67:
            { return BACKTRACKABLE_ARROW_OP;
            }
          // fall through
          case 174: break;
          case 68:
            { return AND_KEYWORD;
            }
          // fall through
          case 175: break;
          case 69:
            { return DIV_KEYWORD;
            }
          // fall through
          case 176: break;
          case 70:
            { return END_KEYWORD;
            }
          // fall through
          case 177: break;
          case 71:
            { return MOD_KEYWORD;
            }
          // fall through
          case 178: break;
          case 72:
            { return NOT_KEYWORD;
            }
          // fall through
          case 179: break;
          case 73:
            { return REM_KEYWORD;
            }
          // fall through
          case 180: break;
          case 74:
            { return TRY_KEYWORD;
            }
          // fall through
          case 181: break;
          case 75:
            { return XOR_KEYWORD;
            }
          // fall through
          case 182: break;
          case 76:
            { return HASH_AND_OP;
            }
          // fall through
          case 183: break;
          case 77:
            { return HASH_BICONDITIONAL_OP;
            }
          // fall through
          case 184: break;
          case 78:
            { return HASH_OR_OP;
            }
          // fall through
          case 185: break;
          case 79:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 186: break;
          case 80:
            { return NOT_IDENTICAL;
            }
          // fall through
          case 187: break;
          case 81:
            { return BACKTRACKABLE_BICONDITIONAL_OP;
            }
          // fall through
          case 188: break;
          case 82:
            { return CASE_KEYWORD;
            }
          // fall through
          case 189: break;
          case 83:
            { return ELSE_KEYWORD;
            }
          // fall through
          case 190: break;
          case 84:
            { return FAIL_KEYWORD;
            }
          // fall through
          case 191: break;
          case 85:
            { return LOOP_KEYWORD;
            }
          // fall through
          case 192: break;
          case 86:
            { return PASS_KEYWORD;
            }
          // fall through
          case 193: break;
          case 87:
            { return THEN_KEYWORD;
            }
          // fall through
          case 194: break;
          case 88:
            { return TRUE_KEYWORD;
            }
          // fall through
          case 195: break;
          case 89:
            { return BREAK_KEYWORD;
            }
          // fall through
          case 196: break;
          case 90:
            { return CATCH_KEYWORD;
            }
          // fall through
          case 197: break;
          case 91:
            { return FALSE_KEYWORD;
            }
          // fall through
          case 198: break;
          case 92:
            { return INDEX_KEYWORD;
            }
          // fall through
          case 199: break;
          case 93:
            { return TABLE_KEYWORD;
            }
          // fall through
          case 200: break;
          case 94:
            { return THROW_KEYWORD;
            }
          // fall through
          case 201: break;
          case 95:
            { return USING_KEYWORD;
            }
          // fall through
          case 202: break;
          case 96:
            { return WHILE_KEYWORD;
            }
          // fall through
          case 203: break;
          case 97:
            { return ELSEIF_KEYWORD;
            }
          // fall through
          case 204: break;
          case 98:
            { return EXPORT_KEYWORD;
            }
          // fall through
          case 205: break;
          case 99:
            { return IMPORT_KEYWORD;
            }
          // fall through
          case 206: break;
          case 100:
            { return MODULE_KEYWORD;
            }
          // fall through
          case 207: break;
          case 101:
            { return RETURN_KEYWORD;
            }
          // fall through
          case 208: break;
          case 102:
            { return FINALLY_KEYWORD;
            }
          // fall through
          case 209: break;
          case 103:
            { return FOREACH_KEYWORD;
            }
          // fall through
          case 210: break;
          case 104:
            { return INCLUDE_KEYWORD;
            }
          // fall through
          case 211: break;
          case 105:
            { return PRIVATE_KEYWORD;
            }
          // fall through
          case 212: break;
          case 106:
            { return CONTINUE_KEYWORD;
            }
          // fall through
          case 213: break;
          case 107:
            { return END_MODULE_KEYWORD;
            }
          // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
