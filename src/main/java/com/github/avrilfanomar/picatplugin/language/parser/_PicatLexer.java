// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PicatLexer.flex

package com.github.avrilfanomar.picatplugin.language.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes.*;


public class _PicatLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\36\1\40\1\41\10\42\1\43"+
    "\10\42\1\44\2\42\1\45\1\46\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\63\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\63\1\102\1\103\1\104\1\105\6\0"+
    "\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0"+
    "\2\3\5\0\1\1\57\0\1\1\240\0\1\1\377\0"+
    "\u0100\106";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\1\30\1\1\1\31\1\32\22\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\4\0\1\41\1\0"+
    "\1\42\1\43\1\0\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\0\1\51\4\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\0\1\57\1\0\1\60\1\61\2\0\1\27"+
    "\1\62\5\33\1\63\6\33\1\64\1\33\1\65\1\66"+
    "\3\33\1\67\1\70\11\33\1\0\1\71\2\0\1\72"+
    "\1\73\3\0\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\0\1\102\1\0\1\103\1\104\1\105\4\33\1\106"+
    "\1\33\1\107\11\33\1\110\1\111\2\33\1\112\5\33"+
    "\1\113\2\33\1\114\1\115\1\116\1\117\1\120\1\0"+
    "\1\121\1\122\1\33\1\123\2\33\1\124\2\33\1\125"+
    "\6\33\1\126\1\33\1\127\3\33\1\130\1\33\1\131"+
    "\2\33\1\0\1\74\1\132\1\133\4\33\1\134\4\33"+
    "\1\135\3\33\1\136\1\137\1\140\1\141\1\33\1\142"+
    "\1\33\1\143\2\33\1\144\1\33\1\145\1\33\1\146"+
    "\2\33\1\147\1\150\1\151\1\152\1\153\2\33\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\107\0\u01aa"+
    "\0\107\0\u01f1\0\107\0\107\0\u0238\0\u027f\0\107\0\107"+
    "\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\107\0\u0429\0\u0470"+
    "\0\u04b7\0\u04fe\0\107\0\u0545\0\u058c\0\107\0\u05d3\0\107"+
    "\0\107\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\107\0\107\0\107\0\107\0\u011c"+
    "\0\107\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\107"+
    "\0\107\0\u01f1\0\107\0\u0cc2\0\107\0\107\0\107\0\u0d09"+
    "\0\u0d50\0\107\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\107\0\107"+
    "\0\107\0\107\0\u0eb3\0\u0efa\0\107\0\u0f41\0\107\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\107\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u07c4\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u07c4\0\u13b1\0\u13f8\0\u07c4\0\u143f\0\u1486\0\u14cd\0\u07c4"+
    "\0\u07c4\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be"+
    "\0\u1705\0\u174c\0\u1793\0\107\0\u17da\0\u1821\0\107\0\107"+
    "\0\u1868\0\u18af\0\u18f6\0\u193d\0\u0dde\0\u0e25\0\u0e6c\0\107"+
    "\0\107\0\u1984\0\107\0\u19cb\0\107\0\u0545\0\u07c4\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u07c4\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u07c4\0\u1e82\0\u1ec9\0\u07c4\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u07c4\0\u2073\0\u20ba\0\u07c4\0\107\0\107\0\107"+
    "\0\107\0\u2101\0\107\0\107\0\u2148\0\u07c4\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u07c4\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\u07c4\0\u249c\0\u07c4\0\u24e3\0\u252a\0\u2571"+
    "\0\u07c4\0\u25b8\0\u07c4\0\u25ff\0\u2646\0\u268d\0\u268d\0\u07c4"+
    "\0\u07c4\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u07c4\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u07c4\0\u290c\0\u2953\0\u299a\0\u07c4\0\u07c4"+
    "\0\u07c4\0\u07c4\0\u29e1\0\u07c4\0\u2a28\0\u07c4\0\u2a6f\0\u2ab6"+
    "\0\u07c4\0\u2afd\0\u07c4\0\u2b44\0\u07c4\0\u2b8b\0\u2bd2\0\u07c4"+
    "\0\u07c4\0\u07c4\0\u07c4\0\u07c4\0\u2c19\0\u2c60\0\u07c4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\34\1\35\4\34\1\36\1\37\1\40"+
    "\1\41\1\34\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\50\1\51\2\50\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\50\1\60\1\61\1\50\1\62\1\63\1\50"+
    "\1\64\1\65\1\66\2\2\110\0\3\3\135\0\1\67"+
    "\54\0\5\70\1\71\40\70\1\72\40\70\4\0\1\73"+
    "\15\0\1\74\6\0\1\75\1\76\13\0\1\77\1\0"+
    "\1\100\34\0\1\101\1\0\2\10\1\0\104\10\12\102"+
    "\1\103\33\102\1\104\40\102\15\0\1\105\107\0\1\106"+
    "\111\0\1\107\30\0\30\110\22\0\1\111\4\0\1\112"+
    "\105\0\1\113\1\0\4\24\10\0\1\114\3\0\1\115"+
    "\1\116\6\0\1\114\14\0\1\115\7\0\1\116\27\0"+
    "\1\113\1\0\4\24\100\0\1\117\6\0\1\120\2\0"+
    "\1\121\105\0\1\122\1\123\103\0\1\124\3\0\1\125"+
    "\12\0\1\126\72\0\1\127\1\130\104\0\1\131\1\132"+
    "\77\0\4\34\7\0\7\34\4\0\31\34\30\0\4\34"+
    "\7\0\5\34\1\133\1\34\4\0\31\34\53\0\1\134"+
    "\63\0\4\50\7\0\7\50\4\0\16\50\1\135\12\50"+
    "\30\0\4\50\7\0\7\50\4\0\21\50\1\136\7\50"+
    "\30\0\4\50\7\0\7\50\4\0\1\50\1\137\15\50"+
    "\1\140\11\50\30\0\4\50\7\0\7\50\4\0\11\50"+
    "\1\141\5\50\1\142\11\50\30\0\4\50\7\0\7\50"+
    "\4\0\14\50\1\143\1\50\1\144\10\50\1\145\1\50"+
    "\30\0\4\50\7\0\7\50\4\0\1\50\1\146\7\50"+
    "\1\147\5\50\1\150\11\50\30\0\4\50\7\0\7\50"+
    "\4\0\31\50\30\0\4\50\7\0\7\50\4\0\6\50"+
    "\1\151\6\50\1\152\1\153\3\50\1\154\6\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\155\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\156\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\157\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\6\50\1\160\12\50\1\161"+
    "\7\50\30\0\4\50\7\0\7\50\4\0\1\50\1\162"+
    "\17\50\1\163\7\50\30\0\4\50\7\0\7\50\4\0"+
    "\5\50\1\164\23\50\30\0\4\50\7\0\7\50\4\0"+
    "\1\50\1\165\6\50\1\166\10\50\1\167\7\50\30\0"+
    "\4\50\7\0\7\50\4\0\22\50\1\170\6\50\30\0"+
    "\4\50\7\0\7\50\4\0\10\50\1\171\20\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\172\11\50\53\0"+
    "\1\173\72\0\1\174\122\0\1\175\72\0\1\176\105\0"+
    "\1\177\1\0\1\200\121\0\1\201\106\0\1\202\63\0"+
    "\4\110\7\0\7\110\4\0\31\110\5\0\15\111\1\203"+
    "\71\111\23\0\4\204\103\0\2\205\105\0\3\206\104\0"+
    "\4\207\7\0\4\207\10\0\6\207\62\0\1\210\105\0"+
    "\1\211\122\0\1\212\73\0\1\213\105\0\1\214\107\0"+
    "\1\215\76\0\4\34\7\0\3\34\1\216\3\34\4\0"+
    "\31\34\30\0\4\50\7\0\7\50\4\0\4\50\1\217"+
    "\24\50\30\0\4\50\7\0\7\50\4\0\5\50\1\220"+
    "\23\50\30\0\4\50\7\0\7\50\4\0\22\50\1\221"+
    "\1\222\5\50\30\0\4\50\7\0\7\50\4\0\16\50"+
    "\1\223\12\50\30\0\4\50\7\0\7\50\4\0\25\50"+
    "\1\224\3\50\30\0\4\50\7\0\7\50\4\0\22\50"+
    "\1\225\6\50\30\0\4\50\7\0\7\50\4\0\4\50"+
    "\1\226\24\50\30\0\4\50\7\0\7\50\4\0\20\50"+
    "\1\227\10\50\30\0\4\50\7\0\7\50\4\0\11\50"+
    "\1\230\2\50\1\231\14\50\30\0\4\50\7\0\7\50"+
    "\4\0\16\50\1\232\12\50\30\0\4\50\7\0\7\50"+
    "\4\0\21\50\1\233\7\50\30\0\4\50\7\0\7\50"+
    "\4\0\20\50\1\234\10\50\30\0\4\50\7\0\7\50"+
    "\4\0\3\50\1\235\1\236\24\50\30\0\4\50\7\0"+
    "\7\50\4\0\17\50\1\237\11\50\30\0\4\50\7\0"+
    "\7\50\4\0\4\50\1\240\24\50\30\0\4\50\7\0"+
    "\7\50\4\0\23\50\1\241\5\50\30\0\4\50\7\0"+
    "\7\50\4\0\22\50\1\242\6\50\30\0\4\50\7\0"+
    "\7\50\4\0\11\50\1\243\17\50\30\0\4\50\7\0"+
    "\7\50\4\0\15\50\1\244\5\50\1\245\5\50\30\0"+
    "\4\50\7\0\7\50\4\0\2\50\1\246\26\50\30\0"+
    "\4\50\7\0\7\50\4\0\5\50\1\247\13\50\1\250"+
    "\7\50\30\0\4\50\7\0\7\50\4\0\24\50\1\251"+
    "\3\50\1\252\30\0\4\50\7\0\7\50\4\0\11\50"+
    "\1\253\17\50\30\0\4\50\7\0\7\50\4\0\11\50"+
    "\1\254\17\50\30\0\4\50\7\0\7\50\4\0\21\50"+
    "\1\255\7\50\5\0\2\70\2\0\102\70\47\0\1\256"+
    "\73\0\1\257\75\0\1\260\64\0\2\102\2\0\102\102"+
    "\1\0\15\111\1\203\4\111\1\261\64\111\23\0\4\204"+
    "\11\0\1\262\15\0\1\262\62\0\1\263\107\0\1\264"+
    "\76\0\4\50\7\0\7\50\4\0\1\50\1\265\27\50"+
    "\30\0\4\50\7\0\7\50\4\0\5\50\1\266\23\50"+
    "\30\0\4\50\7\0\7\50\4\0\3\50\1\267\25\50"+
    "\30\0\4\50\7\0\7\50\4\0\23\50\1\270\5\50"+
    "\30\0\4\50\7\0\7\50\4\0\5\50\1\271\23\50"+
    "\30\0\4\50\7\0\7\50\4\0\1\272\30\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\273\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\14\50\1\274\14\50\30\0"+
    "\4\50\7\0\7\50\4\0\22\50\1\275\6\50\30\0"+
    "\4\50\7\0\7\50\4\0\1\50\1\276\27\50\30\0"+
    "\4\50\7\0\7\50\4\0\5\50\1\277\23\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\300\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\14\50\1\301\14\50\30\0"+
    "\4\50\7\0\7\50\4\0\5\50\1\302\23\50\30\0"+
    "\4\50\7\0\7\50\4\0\20\50\1\303\10\50\30\0"+
    "\4\50\7\0\7\50\4\0\24\50\1\304\4\50\30\0"+
    "\4\50\7\0\7\50\4\0\22\50\1\305\6\50\30\0"+
    "\4\50\7\0\7\50\4\0\25\50\1\306\3\50\30\0"+
    "\4\50\7\0\7\50\4\0\24\50\1\307\4\50\30\0"+
    "\4\50\7\0\7\50\4\0\14\50\1\310\14\50\30\0"+
    "\4\50\7\0\7\50\4\0\16\50\1\311\12\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\312\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\5\50\1\313\23\50\30\0"+
    "\4\50\7\0\7\50\4\0\16\50\1\314\12\50\30\0"+
    "\4\50\7\0\7\50\4\0\14\50\1\315\14\50\23\0"+
    "\1\316\1\0\1\316\2\0\4\317\103\0\4\50\7\0"+
    "\7\50\4\0\13\50\1\320\15\50\30\0\4\50\7\0"+
    "\7\50\4\0\10\50\1\321\20\50\30\0\4\50\7\0"+
    "\7\50\4\0\11\50\1\322\17\50\30\0\4\50\7\0"+
    "\7\50\4\0\11\50\1\323\17\50\30\0\4\50\7\0"+
    "\7\50\4\0\15\50\1\324\13\50\30\0\4\50\7\0"+
    "\7\50\4\0\21\50\1\325\7\50\30\0\4\50\7\0"+
    "\7\50\4\0\5\50\1\326\23\50\30\0\4\50\7\0"+
    "\7\50\4\0\14\50\1\327\14\50\30\0\4\50\7\0"+
    "\7\50\4\0\1\50\1\330\27\50\30\0\4\50\7\0"+
    "\7\50\4\0\21\50\1\331\7\50\30\0\4\50\7\0"+
    "\7\50\4\0\24\50\1\332\4\50\30\0\4\50\7\0"+
    "\7\50\4\0\27\50\1\333\1\50\30\0\4\50\7\0"+
    "\7\50\4\0\14\50\1\334\14\50\30\0\4\50\7\0"+
    "\7\50\4\0\1\50\1\335\27\50\30\0\4\50\7\0"+
    "\7\50\4\0\21\50\1\336\7\50\30\0\4\50\7\0"+
    "\7\50\4\0\5\50\1\337\23\50\30\0\4\50\7\0"+
    "\7\50\4\0\26\50\1\340\2\50\30\0\4\50\7\0"+
    "\7\50\4\0\7\50\1\341\21\50\30\0\4\50\7\0"+
    "\7\50\4\0\5\50\1\342\23\50\30\0\4\317\103\0"+
    "\4\50\7\0\7\50\4\0\16\50\1\343\12\50\30\0"+
    "\4\50\7\0\7\50\4\0\6\50\1\344\22\50\30\0"+
    "\4\50\7\0\7\50\4\0\17\50\1\345\11\50\30\0"+
    "\4\50\7\0\7\50\4\0\23\50\1\346\5\50\30\0"+
    "\4\50\7\0\7\50\4\0\14\50\1\347\14\50\30\0"+
    "\4\50\7\0\7\50\4\0\3\50\1\350\25\50\30\0"+
    "\4\50\7\0\7\50\4\0\23\50\1\351\5\50\30\0"+
    "\4\50\7\0\7\50\4\0\4\50\1\352\24\50\30\0"+
    "\4\50\7\0\7\50\4\0\5\50\1\353\23\50\30\0"+
    "\4\50\7\0\7\50\4\0\23\50\1\354\5\50\30\0"+
    "\4\50\7\0\7\50\4\0\16\50\1\355\12\50\30\0"+
    "\4\50\7\0\7\50\4\0\24\50\1\356\4\50\30\0"+
    "\4\50\7\0\7\50\4\0\4\50\1\357\24\50\30\0"+
    "\4\50\7\0\7\50\4\0\30\50\1\360\30\0\4\50"+
    "\7\0\7\50\4\0\10\50\1\361\20\50\30\0\4\50"+
    "\7\0\7\50\4\0\5\50\1\362\23\50\30\0\4\50"+
    "\7\0\7\50\4\0\5\50\1\363\23\50\30\0\4\50"+
    "\7\0\7\50\4\0\5\50\1\364\23\50\30\0\4\50"+
    "\7\0\7\50\4\0\24\50\1\365\4\50\30\0\4\50"+
    "\7\0\7\50\4\0\14\50\1\366\14\50\30\0\4\50"+
    "\7\0\7\50\4\0\5\50\1\367\23\50\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11431];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\2\11\5\1\1\11\4\1\1\11\2\1\1\11"+
    "\1\1\2\11\22\1\4\11\1\0\1\11\4\0\1\1"+
    "\1\0\2\11\1\0\1\11\1\0\3\11\1\1\1\0"+
    "\1\11\4\0\4\11\1\1\1\0\1\11\1\0\1\11"+
    "\1\1\2\0\1\1\1\11\36\1\1\0\1\11\2\0"+
    "\2\11\3\0\4\1\2\11\1\0\1\11\1\0\1\11"+
    "\40\1\4\11\1\0\2\11\31\1\1\0\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PicatLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PicatLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 109: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 3:
            { return CUT;
            }
          // fall through
          case 111: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 112: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 113: break;
          case 6:
            { return AMPERSAND;
            }
          // fall through
          case 114: break;
          case 7:
            { return LPAR;
            }
          // fall through
          case 115: break;
          case 8:
            { return RPAR;
            }
          // fall through
          case 116: break;
          case 9:
            { return MULTIPLY;
            }
          // fall through
          case 117: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 118: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 119: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 120: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 121: break;
          case 14:
            { return DIVIDE;
            }
          // fall through
          case 122: break;
          case 15:
            { return INTEGER;
            }
          // fall through
          case 123: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 124: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 125: break;
          case 18:
            { return LESS;
            }
          // fall through
          case 126: break;
          case 19:
            { return EQUAL;
            }
          // fall through
          case 127: break;
          case 20:
            { return GREATER;
            }
          // fall through
          case 128: break;
          case 21:
            { return QUESTION_MARK;
            }
          // fall through
          case 129: break;
          case 22:
            { return AT;
            }
          // fall through
          case 130: break;
          case 23:
            { return VARIABLE;
            }
          // fall through
          case 131: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 132: break;
          case 25:
            { return RBRACKET;
            }
          // fall through
          case 133: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 134: break;
          case 27:
            { return IDENTIFIER;
            }
          // fall through
          case 135: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 136: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 137: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 138: break;
          case 31:
            { return NOT_EQUAL;
            }
          // fall through
          case 139: break;
          case 32:
            { return STRING;
            }
          // fall through
          case 140: break;
          case 33:
            { return HASH_EQUAL_OP;
            }
          // fall through
          case 141: break;
          case 34:
            { return HASH_CARET_OP;
            }
          // fall through
          case 142: break;
          case 35:
            { return HASH_TILDE_OP;
            }
          // fall through
          case 143: break;
          case 36:
            { return QUOTED_ATOM;
            }
          // fall through
          case 144: break;
          case 37:
            { return POWER;
            }
          // fall through
          case 145: break;
          case 38:
            { return CONCAT_OP;
            }
          // fall through
          case 146: break;
          case 39:
            { return RANGE_OP;
            }
          // fall through
          case 147: break;
          case 40:
            { return FIELD_ACCESS;
            }
          // fall through
          case 148: break;
          case 41:
            { return INT_DIVIDE;
            }
          // fall through
          case 149: break;
          case 42:
            { return RULE_OP;
            }
          // fall through
          case 150: break;
          case 43:
            { return DOUBLE_COLON_OP;
            }
          // fall through
          case 151: break;
          case 44:
            { return ASSIGN_OP;
            }
          // fall through
          case 152: break;
          case 45:
            { return SHIFT_LEFT;
            }
          // fall through
          case 153: break;
          case 46:
            { return LESS_EQUAL;
            }
          // fall through
          case 154: break;
          case 47:
            { return ARROW_OP;
            }
          // fall through
          case 155: break;
          case 48:
            { return GREATER_EQUAL;
            }
          // fall through
          case 156: break;
          case 49:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 157: break;
          case 50:
            { return BACKSLASH;
            }
          // fall through
          case 158: break;
          case 51:
            { return DO_KEYWORD;
            }
          // fall through
          case 159: break;
          case 52:
            { return IF_KEYWORD;
            }
          // fall through
          case 160: break;
          case 53:
            { return IN_KEYWORD;
            }
          // fall through
          case 161: break;
          case 54:
            { return IS_KEYWORD;
            }
          // fall through
          case 162: break;
          case 55:
            { return OF_KEYWORD;
            }
          // fall through
          case 163: break;
          case 56:
            { return OR_KEYWORD;
            }
          // fall through
          case 164: break;
          case 57:
            { return HASH_NOT_EQUAL_OP;
            }
          // fall through
          case 165: break;
          case 58:
            { return HASH_LESS_EQUAL_OP;
            }
          // fall through
          case 166: break;
          case 59:
            { return HASH_ARROW_OP;
            }
          // fall through
          case 167: break;
          case 60:
            { return FLOAT;
            }
          // fall through
          case 168: break;
          case 61:
            { return BINARY_INTEGER;
            }
          // fall through
          case 169: break;
          case 62:
            { return OCTAL_INTEGER;
            }
          // fall through
          case 170: break;
          case 63:
            { return HEX_INTEGER;
            }
          // fall through
          case 171: break;
          case 64:
            { return BICONDITIONAL_OP;
            }
          // fall through
          case 172: break;
          case 65:
            { return IDENTICAL;
            }
          // fall through
          case 173: break;
          case 66:
            { return SHIFT_RIGHT_TRIPLE_OP;
            }
          // fall through
          case 174: break;
          case 67:
            { return BACKTRACKABLE_ARROW_OP;
            }
          // fall through
          case 175: break;
          case 68:
            { return EOF;
            }
          // fall through
          case 176: break;
          case 69:
            { return AND_KEYWORD;
            }
          // fall through
          case 177: break;
          case 70:
            { return DIV_KEYWORD;
            }
          // fall through
          case 178: break;
          case 71:
            { return END_KEYWORD;
            }
          // fall through
          case 179: break;
          case 72:
            { return MOD_KEYWORD;
            }
          // fall through
          case 180: break;
          case 73:
            { return NOT_KEYWORD;
            }
          // fall through
          case 181: break;
          case 74:
            { return REM_KEYWORD;
            }
          // fall through
          case 182: break;
          case 75:
            { return TRY_KEYWORD;
            }
          // fall through
          case 183: break;
          case 76:
            { return XOR_KEYWORD;
            }
          // fall through
          case 184: break;
          case 77:
            { return HASH_AND_OP;
            }
          // fall through
          case 185: break;
          case 78:
            { return HASH_BICONDITIONAL_OP;
            }
          // fall through
          case 186: break;
          case 79:
            { return HASH_OR_OP;
            }
          // fall through
          case 187: break;
          case 80:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 188: break;
          case 81:
            { return NOT_IDENTICAL;
            }
          // fall through
          case 189: break;
          case 82:
            { return BACKTRACKABLE_BICONDITIONAL_OP;
            }
          // fall through
          case 190: break;
          case 83:
            { return CASE_KEYWORD;
            }
          // fall through
          case 191: break;
          case 84:
            { return ELSE_KEYWORD;
            }
          // fall through
          case 192: break;
          case 85:
            { return FAIL_KEYWORD;
            }
          // fall through
          case 193: break;
          case 86:
            { return LOOP_KEYWORD;
            }
          // fall through
          case 194: break;
          case 87:
            { return PASS_KEYWORD;
            }
          // fall through
          case 195: break;
          case 88:
            { return THEN_KEYWORD;
            }
          // fall through
          case 196: break;
          case 89:
            { return TRUE_KEYWORD;
            }
          // fall through
          case 197: break;
          case 90:
            { return BREAK_KEYWORD;
            }
          // fall through
          case 198: break;
          case 91:
            { return CATCH_KEYWORD;
            }
          // fall through
          case 199: break;
          case 92:
            { return FALSE_KEYWORD;
            }
          // fall through
          case 200: break;
          case 93:
            { return INDEX_KEYWORD;
            }
          // fall through
          case 201: break;
          case 94:
            { return TABLE_KEYWORD;
            }
          // fall through
          case 202: break;
          case 95:
            { return THROW_KEYWORD;
            }
          // fall through
          case 203: break;
          case 96:
            { return USING_KEYWORD;
            }
          // fall through
          case 204: break;
          case 97:
            { return WHILE_KEYWORD;
            }
          // fall through
          case 205: break;
          case 98:
            { return ELSEIF_KEYWORD;
            }
          // fall through
          case 206: break;
          case 99:
            { return EXPORT_KEYWORD;
            }
          // fall through
          case 207: break;
          case 100:
            { return IMPORT_KEYWORD;
            }
          // fall through
          case 208: break;
          case 101:
            { return MODULE_KEYWORD;
            }
          // fall through
          case 209: break;
          case 102:
            { return RETURN_KEYWORD;
            }
          // fall through
          case 210: break;
          case 103:
            { return FINALLY_KEYWORD;
            }
          // fall through
          case 211: break;
          case 104:
            { return FOREACH_KEYWORD;
            }
          // fall through
          case 212: break;
          case 105:
            { return INCLUDE_KEYWORD;
            }
          // fall through
          case 213: break;
          case 106:
            { return PRIVATE_KEYWORD;
            }
          // fall through
          case 214: break;
          case 107:
            { return CONTINUE_KEYWORD;
            }
          // fall through
          case 215: break;
          case 108:
            { return END_MODULE_KEYWORD;
            }
          // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
