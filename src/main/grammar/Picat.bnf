{
  parserClass="com.github.avrilfanomar.picatplugin.language.parser.PicatParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Picat"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.avrilfanomar.picatplugin.language.psi"
  psiImplPackage="com.github.avrilfanomar.picatplugin.language.psi.impl"

  elementTypeHolderClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes"
  elementTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatElementType"
  tokenTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenType"

  tokens = [
    // Keywords
    MODULE_KEYWORD="module"
    END_MODULE_KEYWORD="end_module"
    IMPORT_KEYWORD="import"
    EXPORT_KEYWORD="export"
    INCLUDE_KEYWORD="include"
    IF_KEYWORD="if"
    THEN_KEYWORD="then"
    ELSEIF_KEYWORD="elseif"
    ELSE_KEYWORD="else"
    END_KEYWORD="end"
    FOREACH_KEYWORD="foreach"
    IN_KEYWORD="in"
    LOOP_KEYWORD="loop"
    PRIVATE_KEYWORD="private"
    TABLE_KEYWORD="table"
    INDEX_KEYWORD="index"
    RETURN_KEYWORD="return"
    CONTINUE_KEYWORD="continue"
    BREAK_KEYWORD="break"
    NOT_KEYWORD="not"
    FAIL_KEYWORD="fail"
    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    CASE_KEYWORD="case"
    OF_KEYWORD="of"
    TRY_KEYWORD="try"
    CATCH_KEYWORD="catch"
    FINALLY_KEYWORD="finally"
    THROW_KEYWORD="throw"
    USING_KEYWORD="using"
    WHILE_KEYWORD="while"
    DO_KEYWORD="do"
    PASS_KEYWORD="pass"

    // Operators
    ARROW_OP="=>"
    BACKTRACKABLE_ARROW_OP="?=>"
    BICONDITIONAL_OP="<=>"
    BACKTRACKABLE_BICONDITIONAL_OP="?<=>"
    HASH_BICONDITIONAL_OP="#<=>"
    HASH_ARROW_OP="#=>"
    HASH_OR_OP="#\\/"
    HASH_CARET_OP="#^"
    HASH_AND_OP="#/\\"
    HASH_TILDE_OP="#~"
    RULE_OP=":-"
    ASSIGN_OP=":="
    RANGE_OP=".."
    EQUAL="="
    NOT_EQUAL="!="
    LESS="<"
    GREATER=">"
    LESS_EQUAL="<="
    GREATER_EQUAL=">="
    IDENTICAL="=:="
    NOT_IDENTICAL="=\\="
    PLUS="+"
    MINUS="-"
    MULTIPLY="*"
    POWER="**"
    DIVIDE="/"
    INT_DIVIDE="//"
    DIV_KEYWORD="div"
    REM_KEYWORD="rem"
    MOD_KEYWORD="mod"
    SHIFT_LEFT="<<"
    SHIFT_RIGHT=">>"
    SHIFT_RIGHT_TRIPLE_OP=">>>"
    BACKSLASH="\\"
    AND_KEYWORD="and"
    OR_KEYWORD="or"
    XOR_KEYWORD="xor"
    CARET="^"
    AMPERSAND="&"
    PIPE="|"
    IS_KEYWORD="is"
    DOT_OP="."
    CONCAT_OP="++"

    // Separators
    DOT="."
    EOR="regexp:\.\s+"
    COMMA=","
    SEMICOLON=";"
    COLON=":"
    LPAR="("
    RPAR=")"
    LBRACKET="["
    RBRACKET="]"
    LBRACE="{"
    RBRACE="}"
    CUT="!"
    PIPE_CHOICE="|"
    AT="@"

    // Literals (expanded)
    IDENTIFIER="regexp:[a-z][a-zA-Z0-9_]*"
    VARIABLE="regexp:[A-Z][a-zA-Z0-9_]*"
    ANONYMOUS_VARIABLE="regexp:_[a-zA-Z0-9_]*"
    INTEGER="regexp:[0-9]+"
    HEX_INTEGER="regexp:0[xX][0-9a-fA-F]+"
    OCTAL_INTEGER="regexp:0[oO][0-7]+"
    BINARY_INTEGER="regexp:0[bB][01]+"
    FLOAT="regexp:[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?"
    STRING="regexp:\"([^\"\\]|\\.)*\""
    QUOTED_ATOM="regexp:'([^'\\]|\\.)*'"
    COMMENT="regexp:%[^\r\n]*"
    MULTI_LINE_COMMENT="regexp:/\*([^*]|\*+[^*/])*\*+/"
  ]
}

// Root rule
picatFile ::= program

program ::= item_*

private item_ ::= (module_decl | general_directive | predicate_clause | function_clause | actor_definition | statement | COMMENT | MULTI_LINE_COMMENT)


// Module declaration
module_decl ::= module_declaration end_module_declaration?
module_declaration ::= MODULE_KEYWORD module_name [export_clause] [import_clause] EOR { pin=1 }
end_module_declaration ::= END_MODULE_KEYWORD [module_name] EOR { pin=1 }
module_name ::= atom

export_clause ::= EXPORT_KEYWORD export_list { pin=1 }
import_clause ::= IMPORT_KEYWORD import_list { pin=1 }

// Directives
general_directive ::= import_statement | export_statement | include_statement | using_statement | compilation_directive {
  elementType = DIRECTIVE
}

compilation_directive ::= [PRIVATE_KEYWORD] (table_mode | index_mode) EOR {pin=1}
table_mode ::= TABLE_KEYWORD head_reference_list
index_mode ::= INDEX_KEYWORD head_reference_list [indexing_details]
head_reference_list ::= head_reference ((COMMA | SEMICOLON) head_reference)*
head_reference ::= atom ('/' INTEGER)?
indexing_details ::= LPAR argument_list RPAR


import_statement ::= IMPORT_KEYWORD import_list EOR { pin=1 }
export_statement ::= EXPORT_KEYWORD export_list EOR { pin=1 }
include_statement ::= INCLUDE_KEYWORD file_spec EOR { pin=1 }
using_statement ::= USING_KEYWORD module_name ["=>" rename_list] EOR { pin=1 }

import_list ::= import_item ("," import_item)*
import_item ::= module_name ["=>" rename_list]
rename_list ::= rename_spec ("," rename_spec)*
rename_spec ::= atom ["=>" atom]

export_list ::= export_spec ("," export_spec)*
export_spec ::= rule | atom

file_spec ::= STRING | atom

// Predicate Clauses
predicate_clause ::= predicate_rule | predicate_fact

private predicate_rule ::= head RULE_OP body EOR {
  pin=1
  elementType = PREDICATE_RULE
}

private predicate_fact ::= head EOR {
  pin=1
  elementType = PREDICATE_FACT
}


// Function Clauses
function_clause ::= function_rule | function_fact

private function_rule ::= head ASSIGN_OP function_body EOR {
  pin=1
  elementType = FUNCTION_RULE
}

private function_fact ::= head ASSIGN_OP expression EOR {
  pin=1
  elementType = FUNCTION_FACT
}

function_body ::= expression {
  elementType = FUNCTION_BODY
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatFunctionBody"
  methods=[getReturnExpression getStatements]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatFunctionBodyImpl"
}

// Actor Definition
actor_definition ::= [PRIVATE_KEYWORD] actor_name EOR (actor_member EOR)* END_KEYWORD EOR {
    elementType = ACTOR_DEFINITION
}
actor_name ::= atom
actor_member ::= action_rule | predicate_clause | function_clause | compilation_directive
action_rule ::= head HASH_ARROW_OP body {
    elementType = ACTION_RULE
}


rule_operator ::= "=>" | "?=>" | "<=>" | "?<=>" | ":-"

// Heads
head ::= atom_no_args | structure | qualified_atom
qualified_atom ::= atom "." atom
atom_no_args ::= atom !LPAR

// Body
body ::= goal ((";" | ",") goal)* [cut] { recoverWhile=body_recover }
private body_recover ::= !(EOR | END_KEYWORD)

// Goals
goal ::= call
       | if_then_else
       | case_expression
       | try_catch
       | assignment
       | unification
       | comparison
       | arithmetic_comparison
       | negation
       | fail
       | pass
       | true_goal
       | false_goal
       | not_goal
       | foreach_loop
       | while_loop
       | loop_while_statement
       | list_comprehension
       | procedure_call
       | cut
       | return_stmt
       | continue_stmt
       | break_stmt
       | throw_stmt

// Goal implementations
call ::= atom | structure
if_then_else ::= IF_KEYWORD expression THEN_KEYWORD body [elseif_clause] [ELSE_KEYWORD body] END_KEYWORD
elseif_clause ::= ELSEIF_KEYWORD expression THEN_KEYWORD body [elseif_clause]
assignment ::= variable ":=" expression
unification ::= expression "=" expression | expression "!=" expression
comparison ::= expression comparison_operator expression
comparison_operator ::= "<" | ">" | "<=" | ">="
arithmetic_comparison ::= expression arithmetic_comparison_operator expression
arithmetic_comparison_operator ::= "=:=" | "=\\="
negation ::= NOT_KEYWORD goal
fail ::= FAIL_KEYWORD
pass ::= PASS_KEYWORD
true_goal ::= TRUE_KEYWORD
false_goal ::= FALSE_KEYWORD
not_goal ::= negation
foreach_loop ::= FOREACH_KEYWORD "(" foreach_generators ")" body END_KEYWORD {
  elementType = FOREACH_LOOP
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatForeachLoop"
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatForeachLoopImpl"
}
foreach_generators ::= foreach_generator ("," foreach_generator)*
foreach_generator ::= variable "in" expression | variable "=" expression
list_comprehension ::= "[" expression "|" foreach_generators "]"
procedure_call ::= atom "(" [argument_list] ")"
cut ::= "!"
return_stmt ::= RETURN_KEYWORD expression
continue_stmt ::= CONTINUE_KEYWORD
break_stmt ::= BREAK_KEYWORD
throw_stmt ::= THROW_KEYWORD expression

// New control structures
case_expression ::= CASE_KEYWORD expression OF_KEYWORD case_arms END_KEYWORD
case_arms ::= case_arm (";" case_arm)*
case_arm ::= pattern "=>" body

try_catch ::= TRY_KEYWORD body CATCH_KEYWORD catch_clauses [FINALLY_KEYWORD body] END_KEYWORD
catch_clauses ::= catch_clause (";" catch_clause)*
catch_clause ::= pattern "=>" body

while_loop ::= WHILE_KEYWORD expression DO_KEYWORD body END_KEYWORD {
  elementType = WHILE_LOOP
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatWhileLoop"
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatWhileLoopImpl"
}

loop_while_statement ::= LOOP_KEYWORD body WHILE_KEYWORD expression EOR {pin=1 elementType=LOOP_WHILE_STATEMENT}


// Patterns
pattern ::= variable | atom | number | "_" | structure_pattern | list_pattern | tuple_pattern
structure_pattern ::= atom "(" [pattern_list] ")"
list_pattern ::= "[" [pattern_list] ["|" pattern] "]"
tuple_pattern ::= "{" [pattern_list] "}"
pattern_list ::= pattern ("," pattern)*

// Basic elements
atom ::= IDENTIFIER | QUOTED_ATOM
variable ::= VARIABLE | ANONYMOUS_VARIABLE
number ::= INTEGER | FLOAT | HEX_INTEGER | OCTAL_INTEGER | BINARY_INTEGER
structure ::= "$"? atom "(" [argument_list] ")" {
  elementType = STRUCTURE
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatStructure"
  methods=[getIdentifier getArgumentList getName getArity]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatStructureImpl"
}
tuple ::= "{" [tuple_items] "}"
tuple_items ::= expression ("," expression)*
argument_list ::= expression ("," expression)*

// Expressions
expression ::= biconditional_expression_level {
  elementType = EXPRESSION
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatExpression"
  methods=[getTerms getOperators]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatExpressionImpl"
}

biconditional_expression_level ::= implication_expression_level ((BICONDITIONAL_OP | HASH_BICONDITIONAL_OP | BACKTRACKABLE_BICONDITIONAL_OP) implication_expression_level)*
implication_expression_level ::= conditional_expression ((ARROW_OP | HASH_ARROW_OP | BACKTRACKABLE_ARROW_OP) conditional_expression)*
conditional_expression ::= logical_or_expression ("?" expression ":" expression)?

logical_or_expression ::= logical_and_expression ((OR_KEYWORD | HASH_OR_OP) logical_and_expression)*
logical_and_expression ::= bitwise_or_expression ((AND_KEYWORD | HASH_AND_OP) bitwise_or_expression)*

bitwise_or_expression ::= bitwise_xor_expression (PIPE bitwise_xor_expression)*
bitwise_xor_expression ::= bitwise_and_expression ((CARET | XOR_KEYWORD | HASH_CARET_OP) bitwise_and_expression)*
bitwise_and_expression ::= equality_expression (AMPERSAND equality_expression)*

equality_expression ::= relational_expression (("=:=" | "=\\=") relational_expression)*
relational_expression ::= shift_expression (("<" | ">" | "<=" | ">=") shift_expression)*
shift_expression ::= additive_expression ((SHIFT_LEFT | SHIFT_RIGHT | SHIFT_RIGHT_TRIPLE_OP) additive_expression)*
additive_expression ::= multiplicative_expression ((PLUS | MINUS) multiplicative_expression)*
multiplicative_expression ::= power_expression ((MULTIPLY | DIVIDE | INT_DIVIDE | MOD_KEYWORD | DIV_KEYWORD | REM_KEYWORD) power_expression)*
power_expression ::= unary_expression ("**" unary_expression)*

unary_expression ::= (PLUS | MINUS | NOT_KEYWORD | BACKSLASH | HASH_TILDE_OP) primary_expression

primary_expression ::=
    atom
  | number
  | variable
  | list_expression
  | tuple
  | map
  | index_access_expression
  | as_pattern_expression
  | lambda_expression
  | term_constructor_expression
  | list_comprehension_expression
  | dollar_term_constructor
  | LPAR expression RPAR
  | function_call

// Dollar Term Constructor: $ goal $
dollar_term_constructor ::= "$" goal "$" {elementType=DOLLAR_TERM_CONSTRUCTOR}

index_access_expression ::= variable LBRACKET expression (COMMA expression)? RBRACKET {elementType=INDEX_ACCESS_EXPRESSION}

as_pattern_expression ::= variable AT pattern AT? {elementType=AS_PATTERN_EXPRESSION}

lambda_expression ::= LBRACE variable_list? RBRACE ARROW_OP (expression | body) {elementType=LAMBDA_EXPRESSION}
variable_list ::= variable (COMMA variable)*

term_constructor_expression ::= (atom | qualified_atom) LBRACE map_entries RBRACE {elementType=TERM_CONSTRUCTOR_EXPRESSION}


// Function Calls
function_call ::= atom LPAR argument_list? RPAR | builtin_call
builtin_call ::= builtin_name LPAR argument_list? RPAR
builtin_name ::= "call" | "apply" | "new_struct" | "new_map"


// List and Array Expressions
list_expression ::= LBRACKET list_items? RBRACKET {
  elementType = LIST
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatList"
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatListImpl"
}
  elementType = LIST
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatList"
  methods=[getListElements]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatListImpl"
}
list_items ::= expression ((COMMA | SEMICOLON) expression)* (PIPE expression)? {
  elementType = LIST_ELEMENTS
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatListElements"
  methods=[getExpressions getTailExpression]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatListElementsImpl"
}
list_comprehension_expression ::= LBRACKET expression PIPE foreach_generators RBRACKET {elementType=LIST_COMPREHENSION_EXPRESSION}

// Operators
operator ::= PLUS | MINUS | MULTIPLY | DIVIDE | MOD_KEYWORD | POWER | SHIFT_LEFT | SHIFT_RIGHT | SHIFT_RIGHT_TRIPLE_OP |
             BACKSLASH | INT_DIVIDE | DIV_KEYWORD | REM_KEYWORD |
             AND_KEYWORD | OR_KEYWORD | XOR_KEYWORD | CARET | AMPERSAND | PIPE | IS_KEYWORD |
             HASH_AND_OP | HASH_OR_OP | HASH_CARET_OP | HASH_TILDE_OP | HASH_ARROW_OP | HASH_BICONDITIONAL_OP {
  elementType = OPERATOR
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatOperator"
  methods=[getOperatorText getPrecedence]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatOperatorImpl"
}

// Maps
map ::= "{" [map_entries] "}"
map_entries ::= map_entry ("," map_entry)*
map_entry ::= expression ":" expression
