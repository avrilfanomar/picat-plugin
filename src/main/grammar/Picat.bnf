{
  parserClass="com.github.avrilfanomar.picatplugin.language.parser.PicatParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Picat"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.avrilfanomar.picatplugin.language.psi"
  psiImplPackage="com.github.avrilfanomar.picatplugin.language.psi.impl"

  elementTypeHolderClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes"
  elementTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatElementType"
  tokenTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenType"

  tokens = [
    // Keywords
    MODULE_KEYWORD="module"
    END_MODULE_KEYWORD="end_module"
    IMPORT_KEYWORD="import"
    EXPORT_KEYWORD="export"
    INCLUDE_KEYWORD="include"
    IF_KEYWORD="if"
    THEN_KEYWORD="then"
    ELSEIF_KEYWORD="elseif"
    ELSE_KEYWORD="else"
    END_KEYWORD="end"
    FOREACH_KEYWORD="foreach"
    IN_KEYWORD="in"
    RETURN_KEYWORD="return"
    CONTINUE_KEYWORD="continue"
    BREAK_KEYWORD="break"
    NOT_KEYWORD="not"
    FAIL_KEYWORD="fail"
    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    CASE_KEYWORD="case"
    OF_KEYWORD="of"
    TRY_KEYWORD="try"
    CATCH_KEYWORD="catch"
    FINALLY_KEYWORD="finally"
    THROW_KEYWORD="throw"
    USING_KEYWORD="using"
    WHILE_KEYWORD="while"
    DO_KEYWORD="do"

    // Operators
    ARROW_OP="=>"
    BACKTRACKABLE_ARROW_OP="?=>"
    BICONDITIONAL_OP="<=>"
    BACKTRACKABLE_BICONDITIONAL_OP="?<=>"
    RULE_OP=":-"
    ASSIGN_OP=":="
    RANGE_OP=".."
    EQUAL="="
    NOT_EQUAL="!="
    LESS="<"
    GREATER=">"
    LESS_EQUAL="<="
    GREATER_EQUAL=">="
    IDENTICAL="=:="
    NOT_IDENTICAL="=\\="
    PLUS="+"
    MINUS="-"
    MULTIPLY="*"
    POWER="**"
    DIVIDE="/"
    INT_DIVIDE="//"
    MOD_KEYWORD="mod"
    SHIFT_LEFT="<<"
    SHIFT_RIGHT=">>"
    BACKSLASH="\\"
    AND_KEYWORD="and"
    OR_KEYWORD="or"
    XOR_KEYWORD="xor"
    CARET="^"
    AMPERSAND="&"
    PIPE="|"
    IS_KEYWORD="is"
    DOT_OP="."
    CONCAT_OP="++"

    // Separators
    DOT="."
    COMMA=","
    SEMICOLON=";"
    COLON=":"
    LPAR="("
    RPAR=")"
    LBRACKET="["
    RBRACKET="]"
    LBRACE="{"
    RBRACE="}"
    CUT="!"
    PIPE_CHOICE="|"
    AT="@"

    // Literals (expanded)
    IDENTIFIER="regexp:[a-z][a-zA-Z0-9_]*"
    VARIABLE="regexp:[A-Z][a-zA-Z0-9_]*"
    ANONYMOUS_VARIABLE="regexp:_[a-zA-Z0-9_]*"
    INTEGER="regexp:[0-9]+"
    HEX_INTEGER="regexp:0[xX][0-9a-fA-F]+"
    OCTAL_INTEGER="regexp:0[oO][0-7]+"
    BINARY_INTEGER="regexp:0[bB][01]+"
    FLOAT="regexp:[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?"
    STRING="regexp:\"([^\"\\]|\\.)*\""
    QUOTED_ATOM="regexp:'([^'\\]|\\.)*'"
    COMMENT="regexp:%[^\r\n]*"
    MULTI_LINE_COMMENT="regexp:/\*([^*]|\*+[^*/])*\*+/"
  ]
}

// Root rule
picatFile ::= program

program ::= item_*

private item_ ::= (module_decl | directive | fact | rule | statement | COMMENT | MULTI_LINE_COMMENT)

// Module declaration
module_decl ::= module_declaration end_module_declaration?
module_declaration ::= MODULE_KEYWORD module_name [export_clause] [import_clause] "." { pin=1 }
end_module_declaration ::= END_MODULE_KEYWORD [module_name] "." { pin=1 }
module_name ::= atom

export_clause ::= EXPORT_KEYWORD export_list { pin=1 }
import_clause ::= IMPORT_KEYWORD import_list { pin=1 }

// Directives
directive ::= import_statement | export_statement | include_statement | using_statement
import_statement ::= IMPORT_KEYWORD import_list "." { pin=1 }
export_statement ::= EXPORT_KEYWORD export_list "." { pin=1 }
include_statement ::= INCLUDE_KEYWORD file_spec "." { pin=1 }
using_statement ::= USING_KEYWORD module_name ["=>" rename_list] "." { pin=1 }

import_list ::= module_spec ("," module_spec)*
module_spec ::= module_name ["=>" rename_list]
rename_list ::= rename_spec ("," rename_spec)*
rename_spec ::= atom ["=>" atom]

export_list ::= export_spec ("," export_spec)*
export_spec ::= predicate_indicator | atom

file_spec ::= STRING | atom

// Facts and Rules
fact ::= head ["=" function_body] "." { pin=1 }
function_body ::= expression {
  elementType = FUNCTION_BODY
  implements="com.github.avrilfanomar.picatplugin.language.psi.PicatFunctionBody"
  methods=[getReturnExpression getStatements]
  extends="com.github.avrilfanomar.picatplugin.language.psi.impl.PicatFunctionBodyImpl"
}
rule ::= head rule_operator body "." { pin=2 }

rule_operator ::= "=>" | "?=>" | "<=>" | "?<=>" | ":-" | "?->"

// Heads
head ::= atom_no_args | structure | qualified_atom
qualified_atom ::= atom "." atom
atom_no_args ::= atom !LPAR

// Body
body ::= goal ((";" | ",") goal)* [cut] { recoverWhile=body_recover }
private body_recover ::= !('.' | 'end')

// Goals
goal ::= call
       | if_then_else
       | case_expression
       | try_catch
       | assignment
       | unification
       | comparison
       | arithmetic_comparison
       | negation
       | fail
       | true_goal
       | false_goal
       | not_goal
       | foreach_loop
       | while_loop
       | list_comprehension
       | procedure_call
       | cut
       | return_stmt
       | continue_stmt
       | break_stmt
       | throw_stmt

// Goal implementations
call ::= atom | structure
if_then_else ::= IF_KEYWORD expression THEN_KEYWORD body [elseif_clause] [ELSE_KEYWORD body] END_KEYWORD
elseif_clause ::= ELSEIF_KEYWORD expression THEN_KEYWORD body [elseif_clause]
assignment ::= variable ":=" expression
unification ::= expression "=" expression | expression "!=" expression
comparison ::= expression comparison_operator expression
comparison_operator ::= "<" | ">" | "<=" | ">="
arithmetic_comparison ::= expression arithmetic_comparison_operator expression
arithmetic_comparison_operator ::= "=:=" | "=\\="
negation ::= NOT_KEYWORD goal
fail ::= FAIL_KEYWORD
true_goal ::= TRUE_KEYWORD
false_goal ::= FALSE_KEYWORD
not_goal ::= negation
foreach_loop ::= FOREACH_KEYWORD "(" foreach_generators ")" body END_KEYWORD
foreach_generators ::= foreach_generator ("," foreach_generator)*
foreach_generator ::= variable "in" expression | variable "=" expression
list_comprehension ::= "[" expression "|" foreach_generators "]"
procedure_call ::= atom "(" [argument_list] ")"
cut ::= "!"
return_stmt ::= RETURN_KEYWORD expression
continue_stmt ::= CONTINUE_KEYWORD
break_stmt ::= BREAK_KEYWORD
throw_stmt ::= THROW_KEYWORD expression

// New control structures
case_expression ::= CASE_KEYWORD expression OF_KEYWORD case_arms END_KEYWORD
case_arms ::= case_arm (";" case_arm)*
case_arm ::= pattern "=>" body

try_catch ::= TRY_KEYWORD body CATCH_KEYWORD catch_clauses [FINALLY_KEYWORD body] END_KEYWORD
catch_clauses ::= catch_clause (";" catch_clause)*
catch_clause ::= pattern "=>" body

while_loop ::= WHILE_KEYWORD expression DO_KEYWORD body END_KEYWORD

// Patterns
pattern ::= variable | atom | number | "_" | structure_pattern | list_pattern | tuple_pattern
structure_pattern ::= atom "(" [pattern_list] ")"
list_pattern ::= "[" [pattern_list] ["|" pattern] "]"
tuple_pattern ::= "{" [pattern_list] "}"
pattern_list ::= pattern ("," pattern)*

// Basic elements
atom ::= IDENTIFIER | QUOTED_ATOM
variable ::= VARIABLE | ANONYMOUS_VARIABLE
number ::= INTEGER | FLOAT | HEX_INTEGER | OCTAL_INTEGER | BINARY_INTEGER
structure ::= atom "(" [argument_list] ")"
tuple ::= "{" [tuple_items] "}"
tuple_items ::= expression ("," expression)*
argument_list ::= expression ("," expression)*

// Expressions
expression ::= conditional_expression {
  elementType = EXPRESSION
  methods=[getTerms getOperators]
}
conditional_expression ::= logical_or_expression ["?" expression ":" expression]
logical_or_expression ::= logical_and_expression ("or" logical_and_expression)*
logical_and_expression ::= bitwise_or_expression ("and" bitwise_or_expression)*
bitwise_or_expression ::= bitwise_xor_expression ("|" bitwise_xor_expression)*
bitwise_xor_expression ::= bitwise_and_expression ("^" bitwise_and_expression)*
bitwise_and_expression ::= equality_expression ("&" equality_expression)*
equality_expression ::= relational_expression (("=:=" | "=\\=") relational_expression)*
relational_expression ::= shift_expression (("<" | ">" | "<=" | ">=") shift_expression)*
shift_expression ::= additive_expression (("<<" | ">>") additive_expression)*
additive_expression ::= multiplicative_expression (("+" | "-") multiplicative_expression)*
multiplicative_expression ::= power_expression (("*" | "/" | "//" | "mod") power_expression)*
power_expression ::= unary_expression ("**" unary_expression)*
unary_expression ::= ["+" | "-" | "not" | "\\"] primary_expression
primary_expression ::= atom | number | variable | list | tuple | "(" expression ")" | function_call

// Function calls
function_call ::= atom "(" [argument_list] ")" | builtin_call
builtin_call ::= builtin_name "(" [argument_list] ")"
builtin_name ::= "call" | "apply" | "new_struct" | "new_map"

// Lists
list ::= "[" [list_items] "]" | "[]" {
  elementType = LIST
  methods=[getListElements]
}
list_items ::= expression (("," | ";") expression)* ["|" expression] {
  elementType = LIST_ELEMENTS
  methods=[getExpressions getTailExpression]
}

// Operators
operator ::= "+" | "-" | "*" | "/" | "mod" | "**" | "<<" | ">>" | "\\" | "//" |
           "and" | "or" | "^" | "&" | "|" | "is" {
  elementType = OPERATOR
  methods=[getOperatorType]
}

// Maps
map ::= "{" [map_entries] "}"
map_entries ::= map_entry ("," map_entry)*
map_entry ::= expression ":" expression
