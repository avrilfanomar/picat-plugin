{
  parserClass="com.github.avrilfanomar.picatplugin.language.parser.PicatParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Picat"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.avrilfanomar.picatplugin.language.psi"
  psiImplPackage="com.github.avrilfanomar.picatplugin.language.psi.impl"

  elementTypeHolderClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTypes"
  elementTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatElementType"
  tokenTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenType"
}

// Root rule
picatFile ::= item_*

private item_ ::= (predicate_definition | function_definition | module_declaration | import_statement | COMMENT)

// Module declaration
module_declaration ::= "module" module_name "." {
  pin=1
  methods=[getName getModuleName]
}
module_name ::= identifier

// Import statement
import_statement ::= "import" module_name "." {
  pin=1
  methods=[getModuleName]
}

// Predicate definition
predicate_definition ::= predicate_head predicate_body "." {
  pin=1
  methods=[getName getArity getHead getBody]
}
predicate_head ::= identifier "(" [argument_list] ")" {
  methods=[getName getArity getArgumentList]
}
predicate_body ::= clause_list

// Function definition
function_definition ::= function_head function_body "." {
  pin=1
  methods=[getName getArity getHead getBody]
}
function_head ::= identifier "(" [argument_list] ")" "=" {
  methods=[getName getArity getArgumentList]
}
function_body ::= expression

// Clauses
clause_list ::= clause (("," | ";") clause)*
clause ::= expression

// Arguments
argument_list ::= argument ("," argument)*
argument ::= expression

// Expressions
expression ::= term (operator term)*
term ::= literal | variable | list | structure | "(" expression ")"

// Literals
literal ::= INTEGER | FLOAT | STRING | atom
atom ::= identifier | QUOTED_ATOM

// Variables
variable ::= VARIABLE

// Lists
list ::= "[" [list_elements] "]"
list_elements ::= expression ("," expression)* ["," "|" "," expression]

// Structures
structure ::= identifier "(" [argument_list] ")"

// Operators
operator ::= "+" | "-" | "*" | "/" | "=" | "!=" | "<" | ">" | "<=" | ">=" | "==" | "!=" | "=:=" | "=\\=" | "is"

// Identifiers
identifier ::= IDENTIFIER

// Tokens
IDENTIFIER ::= regexp:[a-z][a-zA-Z0-9_]*
VARIABLE ::= regexp:[A-Z_][a-zA-Z0-9_]*
INTEGER ::= regexp:[0-9]+
FLOAT ::= regexp:[0-9]+\.[0-9]+
STRING ::= regexp:"[^"]*"
QUOTED_ATOM ::= regexp:'[^']*'
COMMENT ::= regexp:%[^\r\n]*