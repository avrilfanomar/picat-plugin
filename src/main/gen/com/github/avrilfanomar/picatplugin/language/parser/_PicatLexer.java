// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammars/_PicatLexer.flex

package com.github.avrilfanomar.picatplugin.language.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes.*;


public class _PicatLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\2\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\4\31\1\32\25\31"+
    "\1\33\1\34\1\35\1\36\1\31\1\0\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\45"+
    "\1\50\1\51\1\52\1\53\1\54\1\45\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\45\1\65"+
    "\1\66\1\67\1\70\6\0\1\3\32\0\1\1\u01df\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0\u0100\71";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\23\1\24\1\25"+
    "\1\1\1\26\1\27\15\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\36\3\0\1\37\1\40\1\41\1\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\65\1\0\6\30"+
    "\1\66\1\30\1\67\12\30\1\70\1\0\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\0\2\30\1\104\1\30\1\105\7\30\1\106"+
    "\1\107\1\30\1\110\2\30\1\111\1\30\1\112\1\0"+
    "\1\113\2\30\1\114\6\30\1\115\3\30\1\116\1\30"+
    "\1\0\1\100\1\30\1\117\5\30\1\120\3\30\1\121"+
    "\1\122\1\30\1\123\2\30\1\124\1\30\1\125\1\126"+
    "\2\30\1\127\1\130\1\131\1\132\3\30\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\72\0\u015c"+
    "\0\72\0\72\0\u0196\0\u01d0\0\72\0\72\0\u020a\0\u0244"+
    "\0\u027e\0\u02b8\0\72\0\u02f2\0\u032c\0\u0366\0\u03a0\0\72"+
    "\0\u03da\0\72\0\u0414\0\72\0\72\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\72\0\72\0\72\0\72\0\u0740\0\350"+
    "\0\72\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\u0910\0\72\0\72\0\72\0\72\0\u094a\0\72"+
    "\0\72\0\72\0\72\0\u0984\0\u09be\0\72\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u044e\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\72\0\u0e46\0\72\0\72\0\u0e80\0\72"+
    "\0\72\0\72\0\72\0\u0eba\0\72\0\72\0\72\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u044e\0\u0fa2\0\u044e\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u044e\0\u11ac\0\u044e"+
    "\0\u11e6\0\u1220\0\u044e\0\u125a\0\72\0\u1294\0\u12ce\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u044e\0\u1512\0\u154c\0\u1586\0\u044e\0\u15c0\0\u15fa\0\u15fa"+
    "\0\u1634\0\u044e\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u044e"+
    "\0\u1790\0\u17ca\0\u1804\0\u044e\0\u044e\0\u183e\0\u044e\0\u1878"+
    "\0\u18b2\0\u044e\0\u18ec\0\u044e\0\u044e\0\u1926\0\u1960\0\u044e"+
    "\0\u044e\0\u044e\0\u044e\0\u199a\0\u19d4\0\u1a0e\0\u044e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\31"+
    "\1\32\1\33\1\34\1\35\2\36\1\37\1\40\1\41"+
    "\1\42\2\36\1\43\1\44\1\45\1\46\1\36\1\47"+
    "\1\50\1\36\1\51\2\36\1\52\2\36\1\53\1\54"+
    "\1\55\1\56\1\2\73\0\3\3\113\0\1\57\44\0"+
    "\5\60\1\61\26\60\1\62\35\60\4\0\1\63\13\0"+
    "\1\64\3\0\1\65\1\66\1\67\5\0\1\70\1\0"+
    "\1\71\31\0\1\72\1\0\2\10\1\0\67\10\13\0"+
    "\1\73\72\0\1\74\74\0\1\75\72\0\1\76\3\0"+
    "\1\77\1\0\1\100\5\0\1\101\54\0\1\102\1\0"+
    "\1\21\66\0\1\103\3\0\1\104\2\0\1\105\70\0"+
    "\1\106\1\107\70\0\1\110\1\111\1\112\70\0\1\113"+
    "\1\114\70\0\1\115\65\0\1\31\7\0\2\31\4\0"+
    "\26\31\25\0\1\116\72\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\26\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\1\120\25\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\10\36\1\121\15\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\11\36\1\122\1\36"+
    "\1\123\12\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\10\36\1\124\3\36\1\125\11\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\5\36\1\126\4\36"+
    "\1\127\1\130\12\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\1\131\13\36\1\132\11\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\14\36\1\133\11\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\14\36"+
    "\1\134\11\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\16\36\1\135\7\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\4\36\1\136\21\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\1\137\6\36\1\140"+
    "\6\36\1\141\7\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\7\36\1\142\16\36\32\0\1\143\100\0"+
    "\1\144\62\0\1\145\100\0\1\146\62\0\1\147\70\0"+
    "\1\150\1\0\1\151\70\0\1\152\64\0\1\153\72\0"+
    "\1\154\76\0\1\155\71\0\1\156\71\0\1\157\43\0"+
    "\2\160\2\0\65\160\22\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\16\36\1\161\1\36\1\162\5\36\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\22\36\1\163"+
    "\3\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\17\36\1\164\6\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\3\36\1\165\22\36\26\0\1\36\7\0"+
    "\2\36\1\0\1\117\2\0\13\36\1\166\12\36\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\16\36\1\167"+
    "\7\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\15\36\1\170\10\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\2\36\1\171\1\172\22\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\12\36\1\173\13\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\14\36"+
    "\1\174\11\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\3\36\1\175\22\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\20\36\1\176\5\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\10\36\1\177\15\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\12\36"+
    "\1\200\13\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\1\36\1\201\24\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\4\36\1\202\21\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\25\36\1\203\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\10\36\1\204"+
    "\15\36\5\0\2\60\2\0\65\60\27\0\1\205\64\0"+
    "\1\154\10\0\1\206\10\0\1\206\65\0\26\207\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\3\36\1\210"+
    "\22\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\2\36\1\211\23\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\4\36\1\212\21\36\26\0\1\36\7\0"+
    "\2\36\1\0\1\117\2\0\1\213\25\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\4\36\1\214\21\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\14\36"+
    "\1\215\11\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\11\36\1\216\14\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\4\36\1\217\21\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\1\36\1\220\24\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\15\36"+
    "\1\221\10\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\21\36\1\222\4\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\22\36\1\223\3\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\11\36\1\224\14\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\13\36"+
    "\1\225\12\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\11\36\1\226\14\36\21\0\1\227\1\0\1\227"+
    "\2\0\1\230\71\0\1\207\7\0\2\207\4\0\26\207"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\10\36"+
    "\1\231\15\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\7\36\1\232\16\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\10\36\1\233\15\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\11\36\1\234\14\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\1\235"+
    "\25\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\16\36\1\236\7\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\21\36\1\237\4\36\26\0\1\36\7\0"+
    "\2\36\1\0\1\117\2\0\24\36\1\240\1\36\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\3\36\1\241"+
    "\22\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\11\36\1\242\14\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\1\243\25\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\4\36\1\244\21\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\4\36\1\245\21\36"+
    "\26\0\1\230\71\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\13\36\1\246\12\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\5\36\1\247\20\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\11\36\1\250\14\36"+
    "\26\0\1\36\7\0\2\36\1\0\1\117\2\0\2\36"+
    "\1\251\23\36\26\0\1\36\7\0\2\36\1\0\1\117"+
    "\2\0\20\36\1\252\5\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\3\36\1\253\22\36\26\0\1\36"+
    "\7\0\2\36\1\0\1\117\2\0\1\254\25\36\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\4\36\1\255"+
    "\21\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\20\36\1\256\5\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\1\257\25\36\26\0\1\36\7\0\2\36"+
    "\1\0\1\117\2\0\25\36\1\260\26\0\1\36\7\0"+
    "\2\36\1\0\1\117\2\0\7\36\1\261\16\36\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\4\36\1\262"+
    "\21\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\4\36\1\263\21\36\26\0\1\36\7\0\2\36\1\0"+
    "\1\117\2\0\11\36\1\264\14\36\26\0\1\36\7\0"+
    "\2\36\1\0\1\117\2\0\10\36\1\265\15\36\26\0"+
    "\1\36\7\0\2\36\1\0\1\117\2\0\20\36\1\266"+
    "\5\36\26\0\1\36\7\0\2\36\1\0\1\117\2\0"+
    "\25\36\1\267\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6728];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\2\11\2\1\2\11"+
    "\4\1\1\11\4\1\1\11\1\1\1\11\1\1\2\11"+
    "\15\1\4\11\1\1\1\0\1\11\3\0\3\1\1\0"+
    "\11\11\1\0\4\11\1\1\4\11\1\1\1\0\1\11"+
    "\1\0\23\1\1\11\1\0\2\11\1\1\4\11\1\1"+
    "\3\11\1\0\24\1\1\11\1\0\20\1\1\0\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PicatLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PicatLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 92: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 93: break;
          case 3:
            { return DOLLAR;
            }
          // fall through
          case 94: break;
          case 4:
            { return COMMENT;
            }
          // fall through
          case 95: break;
          case 5:
            { return LPAR;
            }
          // fall through
          case 96: break;
          case 6:
            { return RPAR;
            }
          // fall through
          case 97: break;
          case 7:
            { return MULTIPLY;
            }
          // fall through
          case 98: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 99: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 100: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 101: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 102: break;
          case 12:
            { return DIVIDE;
            }
          // fall through
          case 103: break;
          case 13:
            { return INTEGER;
            }
          // fall through
          case 104: break;
          case 14:
            { return COLON;
            }
          // fall through
          case 105: break;
          case 15:
            { return SEMICOLON;
            }
          // fall through
          case 106: break;
          case 16:
            { return LESS;
            }
          // fall through
          case 107: break;
          case 17:
            { return EQUAL;
            }
          // fall through
          case 108: break;
          case 18:
            { return GREATER;
            }
          // fall through
          case 109: break;
          case 19:
            { return AT;
            }
          // fall through
          case 110: break;
          case 20:
            { return VARIABLE;
            }
          // fall through
          case 111: break;
          case 21:
            { return LBRACKET;
            }
          // fall through
          case 112: break;
          case 22:
            { return RBRACKET;
            }
          // fall through
          case 113: break;
          case 23:
            { return BITWISE_XOR;
            }
          // fall through
          case 114: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 115: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 116: break;
          case 26:
            { return PIPE;
            }
          // fall through
          case 117: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 118: break;
          case 28:
            { return COMPLEMENT;
            }
          // fall through
          case 119: break;
          case 29:
            { return NOT_EQUAL;
            }
          // fall through
          case 120: break;
          case 30:
            { return STRING;
            }
          // fall through
          case 121: break;
          case 31:
            { return HASH_LESS_OP;
            }
          // fall through
          case 122: break;
          case 32:
            { return HASH_EQUAL_OP;
            }
          // fall through
          case 123: break;
          case 33:
            { return HASH_GREATER_OP;
            }
          // fall through
          case 124: break;
          case 34:
            { return HASH_XOR_OP;
            }
          // fall through
          case 125: break;
          case 35:
            { return HASH_NOT_OP;
            }
          // fall through
          case 126: break;
          case 36:
            { return POWER;
            }
          // fall through
          case 127: break;
          case 37:
            { return CONCAT_OP;
            }
          // fall through
          case 128: break;
          case 38:
            { return RANGE_OP;
            }
          // fall through
          case 129: break;
          case 39:
            { return INT_DIVIDE;
            }
          // fall through
          case 130: break;
          case 40:
            { return DIV_LEFT;
            }
          // fall through
          case 131: break;
          case 41:
            { return DIV_RIGHT;
            }
          // fall through
          case 132: break;
          case 42:
            { return BITWISE_AND;
            }
          // fall through
          case 133: break;
          case 43:
            { return PROLOG_RULE_OP;
            }
          // fall through
          case 134: break;
          case 44:
            { return DOUBLE_COLON_OP;
            }
          // fall through
          case 135: break;
          case 45:
            { return ASSIGN_OP;
            }
          // fall through
          case 136: break;
          case 46:
            { return SHIFT_LEFT;
            }
          // fall through
          case 137: break;
          case 47:
            { return LESS_EQUAL;
            }
          // fall through
          case 138: break;
          case 48:
            { return LESS_EQUAL_PROLOG;
            }
          // fall through
          case 139: break;
          case 49:
            { return IDENTICAL;
            }
          // fall through
          case 140: break;
          case 50:
            { return ARROW_OP;
            }
          // fall through
          case 141: break;
          case 51:
            { return GREATER_EQUAL;
            }
          // fall through
          case 142: break;
          case 52:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 143: break;
          case 53:
            { return BITWISE_OR;
            }
          // fall through
          case 144: break;
          case 54:
            { return IF_KEYWORD;
            }
          // fall through
          case 145: break;
          case 55:
            { return IN_KEYWORD;
            }
          // fall through
          case 146: break;
          case 56:
            { return NOT_IDENTICAL;
            }
          // fall through
          case 147: break;
          case 57:
            { return HASH_NOT_EQUAL_OP;
            }
          // fall through
          case 148: break;
          case 58:
            { return HASH_AND_OP;
            }
          // fall through
          case 149: break;
          case 59:
            { return HASH_LESS_EQUAL_ALT_OP;
            }
          // fall through
          case 150: break;
          case 60:
            { return HASH_LESS_EQUAL_OP;
            }
          // fall through
          case 151: break;
          case 61:
            { return HASH_ARROW_OP;
            }
          // fall through
          case 152: break;
          case 62:
            { return HASH_GREATER_EQUAL_OP;
            }
          // fall through
          case 153: break;
          case 63:
            { return HASH_OR_OP;
            }
          // fall through
          case 154: break;
          case 64:
            { return FLOAT;
            }
          // fall through
          case 155: break;
          case 65:
            { return BICONDITIONAL_OP;
            }
          // fall through
          case 156: break;
          case 66:
            { return SHIFT_RIGHT_TRIPLE;
            }
          // fall through
          case 157: break;
          case 67:
            { return BACKTRACKABLE_ARROW_OP;
            }
          // fall through
          case 158: break;
          case 68:
            { return DIV_KEYWORD;
            }
          // fall through
          case 159: break;
          case 69:
            { return END_KEYWORD;
            }
          // fall through
          case 160: break;
          case 70:
            { return MOD_KEYWORD;
            }
          // fall through
          case 161: break;
          case 71:
            { return NOT_KEYWORD;
            }
          // fall through
          case 162: break;
          case 72:
            { return REM_KEYWORD;
            }
          // fall through
          case 163: break;
          case 73:
            { return TRY_KEYWORD;
            }
          // fall through
          case 164: break;
          case 74:
            { return HASH_BICONDITIONAL_OP;
            }
          // fall through
          case 165: break;
          case 75:
            { return QUALIFIED_ATOM;
            }
          // fall through
          case 166: break;
          case 76:
            { return ELSE_KEYWORD;
            }
          // fall through
          case 167: break;
          case 77:
            { return LOOP_KEYWORD;
            }
          // fall through
          case 168: break;
          case 78:
            { return THEN_KEYWORD;
            }
          // fall through
          case 169: break;
          case 79:
            { return CATCH_KEYWORD;
            }
          // fall through
          case 170: break;
          case 80:
            { return INDEX_KEYWORD;
            }
          // fall through
          case 171: break;
          case 81:
            { return TABLE_KEYWORD;
            }
          // fall through
          case 172: break;
          case 82:
            { return WHILE_KEYWORD;
            }
          // fall through
          case 173: break;
          case 83:
            { return ELSEIF_KEYWORD;
            }
          // fall through
          case 174: break;
          case 84:
            { return IMPORT_KEYWORD;
            }
          // fall through
          case 175: break;
          case 85:
            { return LAMBDA_KEYWORD;
            }
          // fall through
          case 176: break;
          case 86:
            { return MODULE_KEYWORD;
            }
          // fall through
          case 177: break;
          case 87:
            { return FINALLY_KEYWORD;
            }
          // fall through
          case 178: break;
          case 88:
            { return FOREACH_KEYWORD;
            }
          // fall through
          case 179: break;
          case 89:
            { return INCLUDE_KEYWORD;
            }
          // fall through
          case 180: break;
          case 90:
            { return PRIVATE_KEYWORD;
            }
          // fall through
          case 181: break;
          case 91:
            { return CARDINALITY_KEYWORD;
            }
          // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
