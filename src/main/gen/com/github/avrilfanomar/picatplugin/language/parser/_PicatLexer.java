// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammars/_PicatLexer.flex

package com.github.avrilfanomar.picatplugin.language.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes.*;


public class _PicatLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\6\23\2\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\34\1\36\1\34\10\37\1\40"+
    "\10\37\1\41\2\37\1\42\1\43\1\44\1\45\1\37"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\54\1\57\1\60\1\61\1\62\1\63"+
    "\1\54\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\54\1\74\1\75\1\76\1\77\6\0\1\1"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24"+
    "\1\25\1\26\1\1\1\27\1\30\16\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\0\1\37\1\0\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\0\1\45\1\46\1\47"+
    "\1\0\1\50\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\4\0\1\56\1\57\1\60\1\61\1\62\1\0\1\63"+
    "\1\64\1\65\1\0\1\66\1\67\1\0\1\70\1\0"+
    "\1\71\1\72\1\0\7\31\1\73\1\31\1\74\6\31"+
    "\1\75\7\31\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\0\1\106\3\16\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\2\31\1\120"+
    "\1\31\1\121\11\31\1\122\1\123\1\124\1\125\1\31"+
    "\1\126\4\31\1\127\2\31\1\130\1\131\1\0\2\31"+
    "\1\132\1\133\7\31\1\134\4\31\1\135\1\136\2\31"+
    "\1\0\1\106\1\31\1\137\1\31\1\140\4\31\1\141"+
    "\4\31\1\142\1\143\1\144\1\31\1\145\2\31\1\146"+
    "\1\31\1\147\1\150\1\31\1\151\1\31\1\152\1\153"+
    "\1\154\1\155\3\31\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\100\0\u0180"+
    "\0\u01c0\0\100\0\100\0\u0200\0\u0240\0\100\0\100\0\u0280"+
    "\0\u02c0\0\u0300\0\u0340\0\u0380\0\100\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\u0500\0\100\0\u0540\0\100\0\100\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\100\0\100\0\100"+
    "\0\100\0\u0900\0\u0100\0\100\0\u0940\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\100\0\100\0\u01c0\0\100\0\100\0\100\0\u0a80"+
    "\0\100\0\u0ac0\0\u0b00\0\100\0\100\0\100\0\100\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\100\0\100\0\100\0\100\0\u0c40"+
    "\0\u0c80\0\100\0\100\0\100\0\u0cc0\0\100\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\100\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u0580\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u0580\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\100\0\100\0\u1400"+
    "\0\100\0\100\0\100\0\100\0\100\0\u1440\0\u1480\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\u14c0\0\u1500\0\u1540\0\u0580\0\u1580\0\u0580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u0580\0\u0580\0\u1800\0\u0580\0\u1840\0\u0580\0\u1880"+
    "\0\u18c0\0\u1900\0\u1940\0\u0580\0\u1980\0\u19c0\0\100\0\100"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u0580\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u0580\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u0580\0\u0580\0\u1dc0\0\u1e00\0\u1e40\0\u1e40\0\u1e80"+
    "\0\u0580\0\u1ec0\0\u0580\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u0580"+
    "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u0580\0\u0580\0\u0580\0\u2100"+
    "\0\u0580\0\u2140\0\u2180\0\u0580\0\u21c0\0\u0580\0\u0580\0\u2200"+
    "\0\u0580\0\u2240\0\u0580\0\u0580\0\u0580\0\u0580\0\u2280\0\u22c0"+
    "\0\u2300\0\u0580";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\3\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\6\33\1\34\1\35\1\36\1\37\2\40\1\41"+
    "\1\42\1\43\1\44\2\40\1\45\1\46\1\47\1\50"+
    "\1\40\1\51\1\52\1\40\1\53\1\54\1\40\1\55"+
    "\2\40\1\56\1\57\1\60\1\61\101\0\2\3\125\0"+
    "\1\62\47\0\4\63\1\64\36\63\1\0\34\63\3\0"+
    "\1\65\23\0\1\66\1\67\1\70\11\0\1\71\1\0"+
    "\1\72\31\0\1\73\2\10\1\0\75\10\10\74\1\75"+
    "\32\74\1\0\34\74\13\0\1\76\100\0\1\77\73\0"+
    "\1\100\6\0\1\101\26\0\26\102\17\0\1\103\4\0"+
    "\1\104\6\0\1\105\1\0\1\106\11\0\1\107\53\0"+
    "\1\110\1\0\4\23\10\0\1\111\2\0\1\112\1\113"+
    "\5\0\1\111\12\0\1\112\7\0\1\113\24\0\1\110"+
    "\1\0\4\23\71\0\1\114\6\0\1\115\2\0\1\116"+
    "\76\0\1\117\1\120\74\0\1\121\1\0\1\122\1\123"+
    "\1\124\11\0\1\125\64\0\1\126\1\127\76\0\1\130"+
    "\76\0\1\131\1\132\1\133\67\0\4\33\7\0\6\33"+
    "\4\0\26\33\24\0\1\134\76\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\26\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\1\136\25\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\10\40\1\137\15\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\11\40\1\140"+
    "\1\40\1\141\12\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\1\142\7\40\1\143\3\40\1\144\11\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\5\40"+
    "\1\145\4\40\1\146\1\147\12\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\1\150\13\40\1\151\11\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\1\152"+
    "\7\40\1\153\3\40\1\154\11\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\14\40\1\155\3\40\1\156"+
    "\5\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\16\40\1\157\7\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\4\40\1\160\21\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\1\161\6\40\1\162\6\40"+
    "\1\163\7\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\13\40\1\164\12\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\7\40\1\165\16\40\34\0\1\166"+
    "\77\0\1\167\77\0\1\170\76\0\1\171\1\0\1\172"+
    "\76\0\1\173\67\0\1\174\57\0\10\100\1\175\32\100"+
    "\1\0\34\100\21\0\4\102\7\0\6\102\4\0\26\102"+
    "\4\0\13\103\1\176\64\103\21\0\4\177\74\0\2\200"+
    "\76\0\3\201\75\0\4\202\7\0\3\202\7\0\6\202"+
    "\55\0\1\203\76\0\1\204\77\0\1\205\100\0\1\206"+
    "\77\0\1\207\76\0\1\210\76\0\1\211\100\0\1\212"+
    "\115\0\26\213\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\16\40\1\214\1\40\1\215\5\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\22\40\1\216\3\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\17\40"+
    "\1\217\6\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\3\40\1\220\22\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\10\40\1\221\1\222\14\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\13\40\1\223"+
    "\12\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\16\40\1\224\7\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\15\40\1\225\10\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\2\40\1\226\1\227\22\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\12\40"+
    "\1\230\13\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\14\40\1\231\11\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\24\40\1\232\1\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\13\40\1\233\12\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\3\40"+
    "\1\234\22\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\20\40\1\235\5\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\10\40\1\236\15\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\12\40\1\237\2\40"+
    "\1\240\10\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\1\40\1\241\24\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\4\40\1\242\21\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\21\40\1\243\3\40"+
    "\1\244\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\20\40\1\245\5\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\10\40\1\246\15\40\35\0\1\247\46\0"+
    "\20\103\1\250\57\103\21\0\4\177\11\0\1\251\13\0"+
    "\1\251\46\0\4\213\7\0\6\213\4\0\26\213\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\3\40\1\252"+
    "\22\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\2\40\1\253\23\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\4\40\1\254\21\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\11\40\1\255\14\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\17\40\1\256"+
    "\6\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\1\257\25\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\4\40\1\260\21\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\14\40\1\261\11\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\11\40\1\262\14\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\4\40"+
    "\1\263\21\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\1\40\1\264\24\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\15\40\1\265\10\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\21\40\1\266\4\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\22\40"+
    "\1\267\3\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\4\40\1\270\21\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\11\40\1\271\14\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\13\40\1\272\12\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\4\40"+
    "\1\273\21\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\10\40\1\274\15\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\11\40\1\275\14\40\20\0\1\276"+
    "\1\0\1\276\2\0\4\277\72\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\10\40\1\300\15\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\7\40\1\301\16\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\10\40"+
    "\1\302\15\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\4\40\1\303\21\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\11\40\1\304\14\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\1\305\25\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\16\40\1\306"+
    "\7\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\21\40\1\307\4\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\24\40\1\310\1\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\3\40\1\311\22\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\11\40\1\312"+
    "\14\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\1\313\25\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\1\314\25\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\4\40\1\315\21\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\11\40\1\316\14\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\4\40\1\317"+
    "\21\40\25\0\4\277\72\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\13\40\1\320\12\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\5\40\1\321\20\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\11\40\1\322"+
    "\14\40\23\0\1\135\1\0\4\40\7\0\6\40\4\0"+
    "\2\40\1\323\23\40\23\0\1\135\1\0\4\40\7\0"+
    "\6\40\4\0\20\40\1\324\5\40\23\0\1\135\1\0"+
    "\4\40\7\0\6\40\4\0\3\40\1\325\22\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\1\326\25\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\4\40"+
    "\1\327\21\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\20\40\1\330\5\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\20\40\1\331\5\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\1\332\25\40\23\0"+
    "\1\135\1\0\4\40\7\0\6\40\4\0\25\40\1\333"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\7\40"+
    "\1\334\16\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\4\40\1\335\21\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\4\40\1\336\21\40\23\0\1\135"+
    "\1\0\4\40\7\0\6\40\4\0\11\40\1\337\14\40"+
    "\23\0\1\135\1\0\4\40\7\0\6\40\4\0\10\40"+
    "\1\340\15\40\23\0\1\135\1\0\4\40\7\0\6\40"+
    "\4\0\20\40\1\341\5\40\23\0\1\135\1\0\4\40"+
    "\7\0\6\40\4\0\25\40\1\342\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9024];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\2\11\2\1\2\11"+
    "\5\1\1\11\6\1\1\11\1\1\2\11\16\1\4\11"+
    "\1\1\1\0\1\11\1\0\3\1\1\0\2\11\1\0"+
    "\3\11\1\0\1\11\1\1\1\0\4\11\4\0\4\11"+
    "\1\1\1\0\3\11\1\0\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\30\1\2\11\1\1\5\11"+
    "\1\0\4\1\10\11\34\1\2\11\1\0\24\1\1\0"+
    "\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PicatLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PicatLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 111: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 3:
            { return EXCLAMATION;
            }
          // fall through
          case 113: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 114: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 115: break;
          case 6:
            { return LPAR;
            }
          // fall through
          case 116: break;
          case 7:
            { return RPAR;
            }
          // fall through
          case 117: break;
          case 8:
            { return MULTIPLY;
            }
          // fall through
          case 118: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 119: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 120: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 121: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 122: break;
          case 13:
            { return DIVIDE;
            }
          // fall through
          case 123: break;
          case 14:
            { return INTEGER;
            }
          // fall through
          case 124: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 125: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 126: break;
          case 17:
            { return LESS;
            }
          // fall through
          case 127: break;
          case 18:
            { return EQUAL;
            }
          // fall through
          case 128: break;
          case 19:
            { return GREATER;
            }
          // fall through
          case 129: break;
          case 20:
            { return AT;
            }
          // fall through
          case 130: break;
          case 21:
            { return VARIABLE;
            }
          // fall through
          case 131: break;
          case 22:
            { return LBRACKET;
            }
          // fall through
          case 132: break;
          case 23:
            { return RBRACKET;
            }
          // fall through
          case 133: break;
          case 24:
            { return BITWISE_XOR;
            }
          // fall through
          case 134: break;
          case 25:
            { return IDENTIFIER;
            }
          // fall through
          case 135: break;
          case 26:
            { return LBRACE;
            }
          // fall through
          case 136: break;
          case 27:
            { return PIPE;
            }
          // fall through
          case 137: break;
          case 28:
            { return RBRACE;
            }
          // fall through
          case 138: break;
          case 29:
            { return COMPLEMENT;
            }
          // fall through
          case 139: break;
          case 30:
            { return NOT_EQUAL;
            }
          // fall through
          case 140: break;
          case 31:
            { return STRING;
            }
          // fall through
          case 141: break;
          case 32:
            { return HASH_LESS_OP;
            }
          // fall through
          case 142: break;
          case 33:
            { return HASH_EQUAL_OP;
            }
          // fall through
          case 143: break;
          case 34:
            { return HASH_GREATER_OP;
            }
          // fall through
          case 144: break;
          case 35:
            { return HASH_XOR_OP;
            }
          // fall through
          case 145: break;
          case 36:
            { return HASH_NOT_OP;
            }
          // fall through
          case 146: break;
          case 37:
            { return SINGLE_QUOTED_ATOM;
            }
          // fall through
          case 147: break;
          case 38:
            { return POWER;
            }
          // fall through
          case 148: break;
          case 39:
            { return CONCAT_OP;
            }
          // fall through
          case 149: break;
          case 40:
            { return RANGE_OP;
            }
          // fall through
          case 150: break;
          case 41:
            { return DOT_IDENTIFIER;
            }
          // fall through
          case 151: break;
          case 42:
            { return INT_DIVIDE;
            }
          // fall through
          case 152: break;
          case 43:
            { return DIV_LEFT;
            }
          // fall through
          case 153: break;
          case 44:
            { return DIV_RIGHT;
            }
          // fall through
          case 154: break;
          case 45:
            { return HASH_AND_OP;
            }
          // fall through
          case 155: break;
          case 46:
            { return PROLOG_RULE_OP;
            }
          // fall through
          case 156: break;
          case 47:
            { return DOUBLE_COLON_OP;
            }
          // fall through
          case 157: break;
          case 48:
            { return ASSIGN_OP;
            }
          // fall through
          case 158: break;
          case 49:
            { return SHIFT_LEFT;
            }
          // fall through
          case 159: break;
          case 50:
            { return LESS_EQUAL;
            }
          // fall through
          case 160: break;
          case 51:
            { return LESS_EQUAL_PROLOG;
            }
          // fall through
          case 161: break;
          case 52:
            { return IDENTICAL;
            }
          // fall through
          case 162: break;
          case 53:
            { return ARROW_OP;
            }
          // fall through
          case 163: break;
          case 54:
            { return GREATER_EQUAL;
            }
          // fall through
          case 164: break;
          case 55:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 165: break;
          case 56:
            { return AT_LESS_OP;
            }
          // fall through
          case 166: break;
          case 57:
            { return AT_GREATER_OP;
            }
          // fall through
          case 167: break;
          case 58:
            { return BITWISE_OR;
            }
          // fall through
          case 168: break;
          case 59:
            { return IF_KEYWORD;
            }
          // fall through
          case 169: break;
          case 60:
            { return IN_KEYWORD;
            }
          // fall through
          case 170: break;
          case 61:
            { return NT;
            }
          // fall through
          case 171: break;
          case 62:
            { return NOT_IDENTICAL;
            }
          // fall through
          case 172: break;
          case 63:
            { return HASH_NOT_EQUAL_OP;
            }
          // fall through
          case 173: break;
          case 64:
            { return HASH_LESS_EQUAL_ALT_OP;
            }
          // fall through
          case 174: break;
          case 65:
            { return HASH_LESS_EQUAL_OP;
            }
          // fall through
          case 175: break;
          case 66:
            { return HASH_ARROW_OP;
            }
          // fall through
          case 176: break;
          case 67:
            { return HASH_GREATER_EQUAL_OP;
            }
          // fall through
          case 177: break;
          case 68:
            { return HASH_OR_OP;
            }
          // fall through
          case 178: break;
          case 69:
            { return DOT_SINGLE_QUOTED_ATOM;
            }
          // fall through
          case 179: break;
          case 70:
            { return FLOAT;
            }
          // fall through
          case 180: break;
          case 71:
            { return BICONDITIONAL_OP;
            }
          // fall through
          case 181: break;
          case 72:
            { return NUMERICALLY_EQUAL;
            }
          // fall through
          case 182: break;
          case 73:
            { return NUMERICALLY_NON_EQUAL;
            }
          // fall through
          case 183: break;
          case 74:
            { return SHIFT_RIGHT_TRIPLE;
            }
          // fall through
          case 184: break;
          case 75:
            { return BACKTRACKABLE_ARROW_OP;
            }
          // fall through
          case 185: break;
          case 76:
            { return AT_LESS_EQUAL_OP;
            }
          // fall through
          case 186: break;
          case 77:
            { return AT_LESS_EQUAL_PROLOG_OP;
            }
          // fall through
          case 187: break;
          case 78:
            { return AT_GREATER_EQUAL_OP;
            }
          // fall through
          case 188: break;
          case 79:
            { return QUALIFIED_ATOM;
            }
          // fall through
          case 189: break;
          case 80:
            { return DIV_KEYWORD;
            }
          // fall through
          case 190: break;
          case 81:
            { return END_KEYWORD;
            }
          // fall through
          case 191: break;
          case 82:
            { return MAX;
            }
          // fall through
          case 192: break;
          case 83:
            { return MIN;
            }
          // fall through
          case 193: break;
          case 84:
            { return MOD_KEYWORD;
            }
          // fall through
          case 194: break;
          case 85:
            { return NOT_KEYWORD;
            }
          // fall through
          case 195: break;
          case 86:
            { return REM_KEYWORD;
            }
          // fall through
          case 196: break;
          case 87:
            { return TRY_KEYWORD;
            }
          // fall through
          case 197: break;
          case 88:
            { return HASH_BICONDITIONAL_OP;
            }
          // fall through
          case 198: break;
          case 89:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 199: break;
          case 90:
            { return ELSE_KEYWORD;
            }
          // fall through
          case 200: break;
          case 91:
            { return FAIL_KEYWORD;
            }
          // fall through
          case 201: break;
          case 92:
            { return LOOP_KEYWORD;
            }
          // fall through
          case 202: break;
          case 93:
            { return THEN_KEYWORD;
            }
          // fall through
          case 203: break;
          case 94:
            { return TRUE;
            }
          // fall through
          case 204: break;
          case 95:
            { return CATCH_KEYWORD;
            }
          // fall through
          case 205: break;
          case 96:
            { return FALSE;
            }
          // fall through
          case 206: break;
          case 97:
            { return INDEX_KEYWORD;
            }
          // fall through
          case 207: break;
          case 98:
            { return TABLE_KEYWORD;
            }
          // fall through
          case 208: break;
          case 99:
            { return UNTIL_KEYWORD;
            }
          // fall through
          case 209: break;
          case 100:
            { return WHILE_KEYWORD;
            }
          // fall through
          case 210: break;
          case 101:
            { return ELSEIF_KEYWORD;
            }
          // fall through
          case 211: break;
          case 102:
            { return IMPORT_KEYWORD;
            }
          // fall through
          case 212: break;
          case 103:
            { return LAMBDA_KEYWORD;
            }
          // fall through
          case 213: break;
          case 104:
            { return MODULE_KEYWORD;
            }
          // fall through
          case 214: break;
          case 105:
            { return REPEAT_KEYWORD;
            }
          // fall through
          case 215: break;
          case 106:
            { return FINALLY_KEYWORD;
            }
          // fall through
          case 216: break;
          case 107:
            { return FOREACH_KEYWORD;
            }
          // fall through
          case 217: break;
          case 108:
            { return INCLUDE_KEYWORD;
            }
          // fall through
          case 218: break;
          case 109:
            { return PRIVATE_KEYWORD;
            }
          // fall through
          case 219: break;
          case 110:
            { return CARDINALITY_KEYWORD;
            }
          // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
