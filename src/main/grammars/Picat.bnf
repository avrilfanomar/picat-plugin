{
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  parserClass="com.github.avrilfanomar.picatplugin.language.parser.PicatParser"
  psiClassPrefix="Picat"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.avrilfanomar.picatplugin.language.psi"
  psiImplPackage="com.github.avrilfanomar.picatplugin.language.psi.impl"

  elementTypeHolderClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenTypes"
  elementTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatElementType"
  tokenTypeClass="com.github.avrilfanomar.picatplugin.language.psi.PicatTokenType"

  tokens = [
    // Keywords
    MODULE_KEYWORD="module"
    END_MODULE_KEYWORD="end_module"
    IMPORT_KEYWORD="import"
    EXPORT_KEYWORD="export"
    INCLUDE_KEYWORD="include"
    IF_KEYWORD="if"
    THEN_KEYWORD="then"
    ELSEIF_KEYWORD="elseif"
    ELSE_KEYWORD="else"
    END_KEYWORD="end"
    FOREACH_KEYWORD="foreach"
    IN_KEYWORD="in"
    LOOP_KEYWORD="loop"
    PRIVATE_KEYWORD="private"
    TABLE_KEYWORD="table"
    INDEX_KEYWORD="index"
    RETURN_KEYWORD="return"
    CONTINUE_KEYWORD="continue"
    BREAK_KEYWORD="break"
    NOT_KEYWORD="not"
    FAIL_KEYWORD="fail"
    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    CASE_KEYWORD="case"
    OF_KEYWORD="of"
    TRY_KEYWORD="try"
    CATCH_KEYWORD="catch"
    FINALLY_KEYWORD="finally"
    THROW_KEYWORD="throw"
    USING_KEYWORD="using"
    WHILE_KEYWORD="while"
    DO_KEYWORD="do"
    PASS_KEYWORD="pass"

    // Operators
    ARROW_OP="=>"
    BACKTRACKABLE_ARROW_OP="?=>"
    BICONDITIONAL_OP="<=>"
    BACKTRACKABLE_BICONDITIONAL_OP="?<=>"
    HASH_BICONDITIONAL_OP="#<=>"
    HASH_ARROW_OP="#=>"
    HASH_OR_OP="#\\/"
    HASH_CARET_OP="#^"
    HASH_AND_OP="#/\\"
    HASH_TILDE_OP="#~"
    HASH_ASSIGN_OP="#="
    RULE_OP=":-"
    ASSIGN_OP=":="
    RANGE_OP=".."
    EQUAL="="
    NOT_EQUAL="!="
    LESS="<"
    GREATER=">"
    LESS_EQUAL="<="
    GREATER_EQUAL=">="
    IDENTICAL="=:="
    NOT_IDENTICAL="=\\="
    PLUS="+"
    MINUS="-"
    MULTIPLY="*"
    POWER="**"
    DIVIDE="/"
    INT_DIVIDE="//"
    DIV_KEYWORD="div"
    REM_KEYWORD="rem"
    MOD_KEYWORD="mod"
    SHIFT_LEFT="<<"
    SHIFT_RIGHT=">>"
    SHIFT_RIGHT_TRIPLE_OP=">>>"
    BACKSLASH="\\"
    AND_KEYWORD="and"
    OR_KEYWORD="or"
    XOR_KEYWORD="xor"
    CARET="^"
    AMPERSAND="&"
    PIPE="|"
    IS_KEYWORD="is"
    CONCAT_OP="++"
    DOUBLE_COLON_OP="::"

    // Separators
    DOT="."
    COMMA=","
    SEMICOLON=";"
    COLON=":"
    LPAR="("
    RPAR=")"
    LBRACKET="["
    RBRACKET="]"
    LBRACE="{"
    RBRACE="}"
    CUT="!"
    AT="@"

    // Literals (expanded)
    IDENTIFIER="regexp:[a-z][a-zA-Z0-9_]*"
    VARIABLE="regexp:[A-Z][a-zA-Z0-9_]*"
    INTEGER="regexp:[0-9]+"
    HEX_INTEGER="regexp:0[xX][0-9a-fA-F]+"
    OCTAL_INTEGER="regexp:0[oO][0-7]+"
    BINARY_INTEGER="regexp:0[bB][01]+"
    FLOAT="regexp:[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?"
    STRING="regexp:\"([^\"\\]|\\.)*\""
    QUOTED_ATOM="regexp:'([^'\\]|\\.)*'"
    COMMENT="regexp:%[^\r\n]*"
    MULTI_LINE_COMMENT="regexp:/\*([^*]|\*+[^*/])*\*+/"
  ]
}

// Root rule
picatFile ::= item_*

private item_ ::= function_clause | predicate_clause | COMMENT | MULTI_LINE_COMMENT | general_directive

// Module declaration
module_name ::= atom

// Directives
general_directive ::= import_statement | export_statement | include_statement | using_statement | compilation_directive

compilation_directive ::= [PRIVATE_KEYWORD] (table_mode | index_mode) DOT {pin=1}
table_mode ::= TABLE_KEYWORD head_reference_list
index_mode ::= INDEX_KEYWORD head_reference_list [indexing_details]
head_reference_list ::= head_reference ( (COMMA | SEMICOLON) head_reference )*
head_reference ::= atom ["/" INTEGER]
indexing_details ::= LPAR argument_list RPAR

import_statement ::= IMPORT_KEYWORD import_list DOT {pin=1}
export_statement ::= EXPORT_KEYWORD export_list DOT {pin=1}
include_statement ::= INCLUDE_KEYWORD file_spec DOT {pin=1}
using_statement ::= USING_KEYWORD module_name [ "=>" rename_list ] DOT {pin=1}

import_list ::= import_item ( COMMA import_item )*
import_item ::= module_name [ "=>" rename_list ]
rename_list ::= rename_spec ( COMMA rename_spec )*
rename_spec ::= atom [ "=>" atom ]

export_list ::= export_spec ( COMMA export_spec )*
export_spec ::= predicate_rule | atom

file_spec ::= STRING | atom

// Predicate Clauses
predicate_clause ::= predicate_rule | predicate_fact

predicate_rule ::= head rule_operator body DOT {pin=2}
predicate_fact ::= head DOT {pin=1}

// Function Clauses
function_clause ::= function_rule | function_fact

function_rule ::= head EQUAL function_body DOT {pin=2}
function_fact ::= head EQUAL expression DOT {pin=2}
function_body ::= expression [ rule_operator body ]

rule_operator ::= ARROW_OP | BACKTRACKABLE_ARROW_OP | BICONDITIONAL_OP | BACKTRACKABLE_BICONDITIONAL_OP | RULE_OP

// Heads
head ::= ( structure | atom_no_args | qualified_atom ) ( COMMA expression )*
qualified_atom ::= atom DOT atom
atom_no_args ::= atom

// Body
body ::= goal ( ( SEMICOLON | COMMA ) goal )* {recoverWhile=body_recover}
private body_recover ::= !(DOT | END_KEYWORD)

// Goals
goal ::= call
       | if_then_else
       | case_expression
       | try_catch
       | assignment
       | type_annotation
       | unification
       | comparison
       | arithmetic_comparison
       | negation
       | fail_goal
       | pass_goal
       | true_goal
       | false_goal
       | not_goal
       | foreach_loop
       | while_loop
       | loop_while_statement
       | list_comprehension_goal
       | procedure_call
       | cut_goal
       | return_stmt
       | continue_stmt
       | break_stmt
       | throw_stmt
       | expression

// Goal implementations
call ::= structure | atom
if_then_else ::= IF_KEYWORD expression THEN_KEYWORD body [elseif_clause] [ELSE_KEYWORD body] END_KEYWORD
elseif_clause ::= ELSEIF_KEYWORD expression THEN_KEYWORD body [elseif_clause]
assignment ::= variable ( ASSIGN_OP | HASH_ASSIGN_OP ) expression
type_annotation ::= variable DOUBLE_COLON_OP expression
unification ::= expression ( EQUAL | NOT_EQUAL ) expression
comparison ::= expression comparison_operator expression
comparison_operator ::= LESS | GREATER | LESS_EQUAL | GREATER_EQUAL
arithmetic_comparison ::= expression arithmetic_comparison_operator expression
arithmetic_comparison_operator ::= IDENTICAL | NOT_IDENTICAL
negation ::= NOT_KEYWORD goal
fail_goal ::= FAIL_KEYWORD
pass_goal ::= PASS_KEYWORD
true_goal ::= TRUE_KEYWORD
false_goal ::= FALSE_KEYWORD
not_goal ::= negation
foreach_loop ::= FOREACH_KEYWORD LPAR foreach_generators RPAR body END_KEYWORD
foreach_generators ::= foreach_generator ( COMMA foreach_generator )*
foreach_generator ::= variable IN_KEYWORD expression | variable EQUAL expression
list_comprehension_goal ::= LBRACKET expression PIPE foreach_generators RBRACKET
procedure_call ::= atom LPAR [argument_list] RPAR
cut_goal ::= CUT
return_stmt ::= RETURN_KEYWORD expression
continue_stmt ::= CONTINUE_KEYWORD
break_stmt ::= BREAK_KEYWORD
throw_stmt ::= THROW_KEYWORD expression
case_expression ::= CASE_KEYWORD expression OF_KEYWORD case_arms END_KEYWORD
case_arms ::= case_arm ( SEMICOLON case_arm )*
case_arm ::= pattern ARROW_OP body
try_catch ::= TRY_KEYWORD body CATCH_KEYWORD catch_clauses [FINALLY_KEYWORD body] END_KEYWORD
catch_clauses ::= catch_clause ( SEMICOLON catch_clause )*
catch_clause ::= pattern ARROW_OP body
while_loop ::= WHILE_KEYWORD expression body END_KEYWORD
loop_while_statement ::= LOOP_KEYWORD body WHILE_KEYWORD expression DOT {pin=1}

// Patterns
pattern ::= variable | atom | number | structure_pattern | list_pattern | tuple_pattern
structure_pattern ::= atom LPAR [pattern_list] RPAR
list_pattern ::= LBRACKET [pattern_list] [PIPE pattern] RBRACKET
tuple_pattern ::= LBRACE [pattern_list] RBRACE
pattern_list ::= pattern ( COMMA pattern )*

// Basic elements
atom ::= IDENTIFIER | QUOTED_ATOM
number ::= INTEGER | FLOAT | HEX_INTEGER | OCTAL_INTEGER | BINARY_INTEGER
structure ::= atom LPAR [argument_list] RPAR
tuple ::= LBRACE [tuple_items] RBRACE
tuple_items ::= expression ( COMMA expression )*
argument_list ::= expression ( COMMA expression )*

// Expressions
expression ::= biconditional_expression_level

biconditional_expression_level ::= conditional_expression ( ( BICONDITIONAL_OP | HASH_BICONDITIONAL_OP | BACKTRACKABLE_BICONDITIONAL_OP ) conditional_expression )*
conditional_expression ::= logical_or_expression [ "?" expression COLON expression ]

logical_or_expression ::= logical_and_expression ( ( OR_KEYWORD | HASH_OR_OP ) logical_and_expression )*
logical_and_expression ::= bitwise_or_expression ( ( AND_KEYWORD | HASH_AND_OP ) bitwise_or_expression )*

bitwise_or_expression ::= bitwise_xor_expression ( PIPE bitwise_xor_expression )*
bitwise_xor_expression ::= bitwise_and_expression ( ( CARET | XOR_KEYWORD | HASH_CARET_OP ) bitwise_and_expression )*
bitwise_and_expression ::= equality_expression ( AMPERSAND equality_expression )*

equality_expression ::= relational_expression ( ( IDENTICAL | NOT_IDENTICAL ) relational_expression )*
relational_expression ::= shift_expression ( ( LESS | GREATER | LESS_EQUAL | GREATER_EQUAL ) shift_expression )*
shift_expression ::= additive_expression ( ( SHIFT_LEFT | SHIFT_RIGHT | SHIFT_RIGHT_TRIPLE_OP ) additive_expression )*
additive_expression ::= multiplicative_expression ( ( PLUS | MINUS ) multiplicative_expression )*
multiplicative_expression ::= power_expression ( ( MULTIPLY | DIVIDE | INT_DIVIDE | MOD_KEYWORD | DIV_KEYWORD | REM_KEYWORD ) power_expression )*
power_expression ::= unary_expression ( POWER unary_expression )*

unary_expression ::= ( ( PLUS | MINUS | NOT_KEYWORD | BACKSLASH | HASH_TILDE_OP ) primary_expression ) | primary_expression

primary_expression ::= function_call
                     | term_constructor_expression
                     | index_access_expression
                     | as_pattern_expression
                     | number_range
                     | STRING
                     | atom
                     | number
                     | variable
                     | list_expression
                     | list_pattern
                     | structure_pattern
                     | tuple_pattern
                     | tuple
                     | map
                     | lambda_expression
                     | list_comprehension_expression
                     | dollar_term_constructor
                     | LPAR expression RPAR

dollar_term_constructor ::= "$" goal

index_access_expression ::= variable LBRACKET expression [ COMMA expression ] RBRACKET

as_pattern_expression ::= variable AT pattern [ AT ]

lambda_expression ::= LBRACE [variable_list] RBRACE ARROW_OP (expression | body)
variable_list ::= variable ( COMMA variable )*

term_constructor_expression ::= (atom | qualified_atom) LBRACE map_entries RBRACE

number_range ::= ( INTEGER | variable ) RANGE_OP ( INTEGER | variable )

// Function Calls
function_call ::= atom LPAR [argument_list] RPAR | builtin_call
builtin_call ::= builtin_name LPAR [argument_list] RPAR
builtin_name ::= "call" | "apply" | "new_struct" | "new_map"

// Lists and Arrays
list_expression ::= LBRACKET [list_items] RBRACKET
list_items ::= expression ( ( COMMA | SEMICOLON ) expression )* [ PIPE expression ]
list_comprehension_expression ::= LBRACKET expression PIPE foreach_generators RBRACKET

// Maps
map ::= LBRACE [map_entries] RBRACE
map_entries ::= map_entry ( COMMA map_entry )*
map_entry ::= expression COLON expression
